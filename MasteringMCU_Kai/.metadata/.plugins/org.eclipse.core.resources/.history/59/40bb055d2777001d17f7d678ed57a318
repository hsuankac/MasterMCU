/*
 * stm32f407xx_spi_driver.c
 *
 *  Created on: Jun 30, 2022
 *      Author: hsuankai.chang
 */

#include "stm32f407xx_spi_driver.h"

static void spi_txe_interrupt_handle(SPI_Handle_t *pHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pHandle);
static void spi_ovr_err_interrupt_receive(SPI_Handle_t *pHandle);


/***************************************************************************
 * @fn                              - SPI_GetFlagStatus
 *
 * @brief							- This function get the status of the TXE flag in SR
 *
 * @param[in]						- SPI_RegDef_t structure for the SPI
 *
 * @param[in]						- FlagName, SPI_TXE_FALG mask
 *
 * @return							- set or reset
 *
 * @Note							- None
 *
 ****************************************************************************/


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
	if(pSPIx->SR & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}


/***************************************************************************
 * @fn                              - SPI_PeriClockControl
 *
 * @brief							- This function enables or disables peripheral clock for the given SPI port
 *
 * @param[in]						- SPI_RegDef_t structure for the SPI
 *
 * @param[in]						- Enable or disable macro
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/


void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}else if(pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
	}else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}


/***************************************************************************
 * @fn                              - SPI_Init
 *
 * @brief							- This function initialize the SPI
 *
 * @param[in]						- SPI_Handle_t structure for the SPI
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/


void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	// Enable the peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

	// First, lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
	// 1. Configure the device mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);

	//2. Configure the bus configuration
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		// bidirectional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		// bidirectional mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		// bidirectional mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
		// RXONLY bit should be set
		tempreg |= (1 << SPI_CR1_RXONLY);
	}
	// 3. Configure the SPI serial clock speed (baud rate)
	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);

	// 4. Configure the DFF
	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);

	// 5. Configure the CPOL
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);

	// 6. Configure the CPHA
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);

	// 7. Configure the SSM
	tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);

	pSPIHandle->pSPIx->CR1 = tempreg;
}


/***************************************************************************
 * @fn                              - SPI_SendData
 *
 * @brief							- This function sends the data through SPI port
 *
 * @param[in]						- SPI_RegDef_t structure for the SPI port
 *
 * @param[in]						- pTxBuffer for transmit data buffer
 *
 * @param[in]						- Len for transmit data length
 *
 * @return							- None
 *
 * @Note							- This is a blocking call (polling type)
 *
 ****************************************************************************/

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t* pTxBuffer, uint32_t Len)
{
	while(Len > 0)
	{
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_FLAG_TXE) == FLAG_RESET);

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
		{
			// 16 bit DFF
			// Load the data into DR
			pSPIx->DR = *((uint16_t*) pTxBuffer);
			Len--;
			Len--;
			(uint16_t*)pTxBuffer ++;
		}else
		{
			// 8 bit DFF
			pSPIx->DR = *pTxBuffer;
			Len--;
			pTxBuffer ++;
		}
	}
}


/***************************************************************************
 * @fn                              - SPI_ReceiveData
 *
 * @brief							- This function receive the data through SPI port
 *
 * @param[in]						- SPI_RegDef_t structure for the SPI port
 *
 * @param[in]						- pTxBuffer for transmit data buffer
 *
 * @param[in]						- Len for transmit data length
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t* pRxBuffer, uint32_t Len)
{
	while(Len > 0)
	{
		// 1. Wait until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_FLAG_RXNE) == FLAG_RESET);

		// 2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
		{
			// 16 bit DFF
			// Load the DR into data
			*((uint16_t*) pRxBuffer) = pSPIx->DR;
			Len--;
			Len--;
			(uint16_t*)pRxBuffer++;
		}else
		{
			// 8 bit DFF
			*pRxBuffer = pSPIx->DR;
			Len--;
			pRxBuffer++;
		}
	}
}


/***************************************************************************
 * @fn                              - SPI_PeripheralControl
 *
 * @brief							- This function enable the SPI peripheral by setting the 6th bit in SPI_CR1
 *
 * @param[in]						- SPI_RegDef_t structure for the SPI port
 *
 * @param[in]						- EnorDi flag
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
	}else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}

/***************************************************************************
 * @fn                              - SPI_SSIConfig
 *
 * @brief							- This function configure the SSI bit in SPI_CR1
 *
 * @param[in]						- SPI_RegDef_t structure for the SPI port
 *
 * @param[in]						- EnorDi flag
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
	}else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

/***************************************************************************
 * @fn                              - SPI_SSOECongfig
 *
 * @brief							- This function configure the SSOE bit in SPI_CR2
 *
 * @param[in]						- SPI_RegDef_t structure for the SPI port
 *
 * @param[in]						- EnorDi flag
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
	}else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}

/***************************************************************************
 * @fn                              - SPI_IRQInterruptConfig
 *
 * @brief							-
 *
 * @param[in]						-
 *
 * @param[in]						-
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(IRQNumber <= 31)
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );

		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
		{
			//program ISER1 register
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 64 && IRQNumber < 96 )
		{
			//program ISER2 register //64 to 95
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
		}
	}else
	{
		if(IRQNumber <= 31)
		{
			//program ICER0 register
			*NVIC_ICER0 |= ( 1 << IRQNumber );
		}else if(IRQNumber > 31 && IRQNumber < 64 )
		{
			//program ICER1 register
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 64 && IRQNumber < 96 )
		{
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}
}

/***************************************************************************
 * @fn                              - SPI_IRQPriorityConfig
 *
 * @brief							-
 *
 * @param[in]						-
 *
 * @param[in]						-
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section  = IRQNumber %4 ;

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;

	*(NVIC_PR_BASE_ADDR + iprx) |=  ( IRQPriority << shift_amount );
}

/***************************************************************************
 * @fn                              - SPI_SendDataIT
 *
 * @brief							-
 *
 * @param[in]						-
 *
 * @param[in]						-
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t* pTxBuffer, uint32_t Len)
{
	uint8_t state = pSPIHandle->TxState;
	if(state != SPI_BUSY_IN_TX)
	{
		// 1. Save the TxBuffer and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
		pSPIHandle->TxLen = Len;

		// 2. Mark the SPI state as busy in transmission so that no other code can take over
		//    some SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;

		// 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
	}
	return state;
}

/***************************************************************************
 * @fn                              - SPI_ReceiveDataIT
 *
 * @brief							-
 *
 * @param[in]						-
 *
 * @param[in]						-
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t* pRxBuffer, uint32_t Len)
{
	uint8_t state = pSPIHandle->RxState;
	if(state != SPI_BUSY_IN_RX)
	{
		// 1. Save the RxBuffer and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
		pSPIHandle->RxLen = Len;

		// 2. Mark the SPI state as busy in reception so that no other code can take over
		//    some SPI peripheral until reception is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;

		// 3. Enable the RXNEIE control bit to get interrupt whenever RXNE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
	}
	return state;
}

/***************************************************************************
 * @fn                              - SPI_IRQHandling
 *
 * @brief							-
 *
 * @param[in]						-
 *
 * @param[in]						-
 *
 * @return							- None
 *
 * @Note							- None
 *
 ****************************************************************************/
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
	uint8_t temp1, temp2;
	// Check for TXE first
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_TXE);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
	if(temp1 && temp2)
	{
		// Handle TXE
		spi_txe_interrupt_handle(pHandle);
	}

	// Check for RXNE
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
	if(temp1 && temp2)
	{
		// Handle rxne
		spi_rxne_interrupt_handle(pHandle);
	}

	// Check for overrun flag
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_OVR);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
	if(temp1 && temp2)
	{
		// Handle ovr
		spi_ovr_err_interrupt_receive(pHandle);
	}
}

// Some helper function
static void spi_txe_interrupt_handle(SPI_Handle_t *pHandle)
{
	// Check the DFF bit in CR1
	if(pHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))
	{
		// 16 bit DFF
		// Load the data into DR
		pHandle->pSPIx->DR = *((uint16_t*)pHandle->pTxBuffer);
		pHandle->TxLen--;
		pHandle->TxLen--;
		(uint16_t*)pHandle->pTxBuffer++;
	}else
	{
		// 8 bit DFF
		pHandle->pSPIx->DR = *(pHandle->pTxBuffer);
		pHandle->TxLen--;
		pHandle->pTxBuffer++;
	}
	if(!pHandle->TxLen)
	{
		// TxLen is zero, so close the spi transmission and inform the application that
		// Tx is over

		// This prevents interrupt from setting up of TXE flag
		SPI_CloseTransmission(pHandle);
		SPI_ApplicationEventCallback(pHandle,SPI_EVENT_TX_CMPLT);
	}
}

static void spi_rxne_interrupt_handle(SPI_Handle_t *pHandle)
{
	if(pHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))
	{
		// 16 bit DFF
		// Load the DR into data
		*((uint16_t*)pHandle->pRxBuffer) = (uint16_t)pHandle->pSPIx->DR;
		pHandle->RxLen-=2;
		pHandle->pRxBuffer--;
		pHandle->pRxBuffer--;
	}else
	{
		// 8 bit DFF
		*(pHandle->pRxBuffer) = (uint8_t)pHandle->pSPIx->DR;
		pHandle->RxLen--;
		pHandle->pRxBuffer--;
	}
	if(!pHandle->RxLen)
	{
		// RxLen is zero, so close the spi reception and inform the application that
		// Rx is over

		// This prevents interrupt from setting up of TXE flag
		SPI_CloseReception(pHandle);
		SPI_ApplicationEventCallback(pHandle,SPI_EVENT_RX_CMPLT);
	}

}

static void spi_ovr_err_interrupt_receive(SPI_Handle_t *pHandle)
{
	uint8_t temp;
	if(pHandle->TxState != SPI_BUSY_IN_TX)
	{
		//Clear the overrun flag
		temp = pHandle->pSPIx->DR;
		temp = pHandle->pSPIx->SR;
	}
	(void) temp;
	// Inform the application
	SPI_ApplicationEventCallBack(pHandle, SPI_EVENT_OVR_ERR);
}

void SPI_CloseTransmission(SPI_Handle_t *pHandle)
{
	pHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
	pHandle->pTxBuffer = NULL;
	pHandle->TxLen = 0;
	pHandle->TxState = SPI_READY;
}

void SPI_CloseReception(SPI_Handle_t *pHandle)
{
	pHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
	pHandle->pRxBuffer = NULL;
	pHandle->RxLen = 0;
	pHandle->RxState = SPI_READY;
}

void SPI_ClearOVRFlag(SPI_RegDef_t *pSPIx)
{
	uint8_t temp;
	temp = pSPIx->DR;
	temp = pSPIx->SR;
	(void) temp;
}

__weak void SPI_ApplicationEventCallBack(SPI_Handle_t *pHandle, uint8_t AppEnv)
{
	// This is a weak implementation, the application may override this function
}
