
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000230c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025cc  080025cc  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080025cc  080025cc  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025cc  080025cc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025d0  080025d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080025d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000458  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004dc  200004dc  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000022bd  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008d7  00000000  00000000  0002236b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00022c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000208  00000000  00000000  00022eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a7c  00000000  00000000  000230c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ef5  00000000  00000000  00026b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c38d  00000000  00000000  00029a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00035dbe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010e0  00000000  00000000  00035e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080024a4 	.word	0x080024a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	080024a4 	.word	0x080024a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <USART2_Init>:
uint8_t rxCmplt = RESET;

uint8_t g_data = 0;

void USART2_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <USART2_Init+0x3c>)
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <USART2_Init+0x40>)
 80002a8:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <USART2_Init+0x3c>)
 80002ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b0:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <USART2_Init+0x3c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <USART2_Init+0x3c>)
 80002ba:	2202      	movs	r2, #2
 80002bc:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <USART2_Init+0x3c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <USART2_Init+0x3c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <USART2_Init+0x3c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <USART2_Init+0x3c>)
 80002d2:	f000 fd27 	bl	8000d24 <USART_Init>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200004a0 	.word	0x200004a0
 80002e0:	40004400 	.word	0x40004400

080002e4 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <USART2_GPIOInit+0x40>)
 80002ec:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ee:	2302      	movs	r3, #2
 80002f0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002f2:	2300      	movs	r3, #0
 80002f4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002f6:	2301      	movs	r3, #1
 80002f8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002fa:	2302      	movs	r3, #2
 80002fc:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 80002fe:	2307      	movs	r3, #7
 8000300:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000302:	2302      	movs	r3, #2
 8000304:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fa37 	bl	800077c <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800030e:	2303      	movs	r3, #3
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fa31 	bl	800077c <GPIO_Init>

}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020000 	.word	0x40020000

08000328 <delay>:

	GPIO_Init(&GpioLed);
}

void delay(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e002      	b.n	800033a <delay+0x12>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <delay+0x28>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d9f8      	bls.n	8000334 <delay+0xc>
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	0003d08f 	.word	0x0003d08f

08000354 <main>:

int main(void)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]

	USART2_GPIOInit();
 800035e:	f7ff ffc1 	bl	80002e4 <USART2_GPIOInit>
    USART2_Init();
 8000362:	f7ff ff9d 	bl	80002a0 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 8000366:	2101      	movs	r1, #1
 8000368:	2026      	movs	r0, #38	; 0x26
 800036a:	f000 fe47 	bl	8000ffc <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 800036e:	2101      	movs	r1, #1
 8000370:	482f      	ldr	r0, [pc, #188]	; (8000430 <main+0xdc>)
 8000372:	f000 fd5a 	bl	8000e2a <USART_PeripheralControl>

    printf("Application is running\n");
 8000376:	482f      	ldr	r0, [pc, #188]	; (8000434 <main+0xe0>)
 8000378:	f001 f91e 	bl	80015b8 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800037c:	bf00      	nop
 800037e:	2100      	movs	r1, #0
 8000380:	482d      	ldr	r0, [pc, #180]	; (8000438 <main+0xe4>)
 8000382:	f000 fb97 	bl	8000ab4 <GPIO_ReadFromInputPin>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0f8      	beq.n	800037e <main+0x2a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800038c:	f7ff ffcc 	bl	8000328 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	4b2a      	ldr	r3, [pc, #168]	; (800043c <main+0xe8>)
 8000394:	fba3 1302 	umull	r1, r3, r3, r2
 8000398:	0859      	lsrs	r1, r3, #1
 800039a:	460b      	mov	r3, r1
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	440b      	add	r3, r1
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,(uint8_t *) rx_buf,strlen(msg[cnt])) != USART_READY );
 80003a4:	bf00      	nop
 80003a6:	4a26      	ldr	r2, [pc, #152]	; (8000440 <main+0xec>)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff1e 	bl	80001f0 <strlen>
 80003b4:	4603      	mov	r3, r0
 80003b6:	461a      	mov	r2, r3
 80003b8:	4922      	ldr	r1, [pc, #136]	; (8000444 <main+0xf0>)
 80003ba:	4823      	ldr	r0, [pc, #140]	; (8000448 <main+0xf4>)
 80003bc:	f000 fdf6 	bl	8000fac <USART_ReceiveDataIT>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1ef      	bne.n	80003a6 <main+0x52>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 80003c6:	4a1e      	ldr	r2, [pc, #120]	; (8000440 <main+0xec>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <main+0xec>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ff0a 	bl	80001f0 <strlen>
 80003dc:	4603      	mov	r3, r0
 80003de:	461a      	mov	r2, r3
 80003e0:	4621      	mov	r1, r4
 80003e2:	4819      	ldr	r0, [pc, #100]	; (8000448 <main+0xf4>)
 80003e4:	f000 fd94 	bl	8000f10 <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 80003e8:	4a15      	ldr	r2, [pc, #84]	; (8000440 <main+0xec>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f0:	4619      	mov	r1, r3
 80003f2:	4816      	ldr	r0, [pc, #88]	; (800044c <main+0xf8>)
 80003f4:	f001 f85a 	bl	80014ac <iprintf>

    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 80003f8:	bf00      	nop
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <main+0xfc>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d1fb      	bne.n	80003fa <main+0xa6>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <main+0xec>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff fef0 	bl	80001f0 <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	3301      	adds	r3, #1
 8000414:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <main+0xf0>)
 8000416:	2100      	movs	r1, #0
 8000418:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 800041a:	490a      	ldr	r1, [pc, #40]	; (8000444 <main+0xf0>)
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <main+0x100>)
 800041e:	f001 f845 	bl	80014ac <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <main+0xfc>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3301      	adds	r3, #1
 800042c:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800042e:	e7a5      	b.n	800037c <main+0x28>
 8000430:	40004400 	.word	0x40004400
 8000434:	080024f4 	.word	0x080024f4
 8000438:	40020000 	.word	0x40020000
 800043c:	aaaaaaab 	.word	0xaaaaaaab
 8000440:	20000000 	.word	0x20000000
 8000444:	200000a0 	.word	0x200000a0
 8000448:	200004a0 	.word	0x200004a0
 800044c:	0800250c 	.word	0x0800250c
 8000450:	200004c4 	.word	0x200004c4
 8000454:	08002520 	.word	0x08002520

08000458 <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 800045c:	4802      	ldr	r0, [pc, #8]	; (8000468 <USART2_IRQHandler+0x10>)
 800045e:	f000 fe51 	bl	8001104 <USART_IRQHandling>
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200004a0 	.word	0x200004a0

0800046c <USART_ApplicationEventCallback>:


void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d102      	bne.n	8000484 <USART_ApplicationEventCallback+0x18>
   {
	   rxCmplt = SET;
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <USART_ApplicationEventCallback+0x24>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	200004c4 	.word	0x200004c4

08000494 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <ITM_SendChar+0x44>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <ITM_SendChar+0x44>)
 80004a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <ITM_SendChar+0x48>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <ITM_SendChar+0x48>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004b6:	bf00      	nop
 80004b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f8      	beq.n	80004b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	6013      	str	r3, [r2, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	e000edfc 	.word	0xe000edfc
 80004dc:	e0000e00 	.word	0xe0000e00

080004e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e00a      	b.n	8000508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004f2:	f3af 8000 	nop.w
 80004f6:	4601      	mov	r1, r0
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	60ba      	str	r2, [r7, #8]
 80004fe:	b2ca      	uxtb	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3301      	adds	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	dbf0      	blt.n	80004f2 <_read+0x12>
	}

return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b086      	sub	sp, #24
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e009      	b.n	8000540 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffad 	bl	8000494 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	3301      	adds	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	dbf1      	blt.n	800052c <_write+0x12>
	}
	return len;
 8000548:	687b      	ldr	r3, [r7, #4]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_close>:

int _close(int file)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
	return -1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000578:	605a      	str	r2, [r3, #4]
	return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_isatty>:

int _isatty(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
	return 1;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	60f8      	str	r0, [r7, #12]
 80005a2:	60b9      	str	r1, [r7, #8]
 80005a4:	607a      	str	r2, [r7, #4]
	return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
	...

080005b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <_sbrk+0x5c>)
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <_sbrk+0x60>)
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <_sbrk+0x64>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <_sbrk+0x68>)
 80005d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d207      	bcs.n	80005f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e4:	f000 ff30 	bl	8001448 <__errno>
 80005e8:	4603      	mov	r3, r0
 80005ea:	220c      	movs	r2, #12
 80005ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	e009      	b.n	8000608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <_sbrk+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <_sbrk+0x64>)
 8000604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3718      	adds	r7, #24
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20020000 	.word	0x20020000
 8000614:	00000400 	.word	0x00000400
 8000618:	200004c8 	.word	0x200004c8
 800061c:	200004e0 	.word	0x200004e0

08000620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000624:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	; (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	; (800066c <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064e:	f000 ff01 	bl	8001454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f7ff fe7f 	bl	8000354 <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   r0, =_estack
 8000658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000664:	080025d4 	.word	0x080025d4
  ldr r2, =_sbss
 8000668:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800066c:	200004dc 	.word	0x200004dc

08000670 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC_IRQHandler>
	...

08000674 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d161      	bne.n	800074a <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a32      	ldr	r2, [pc, #200]	; (8000754 <GPIO_PeriClockControl+0xe0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800068e:	4b32      	ldr	r3, [pc, #200]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a31      	ldr	r2, [pc, #196]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 800069a:	e056      	b.n	800074a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a2f      	ldr	r2, [pc, #188]	; (800075c <GPIO_PeriClockControl+0xe8>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b0:	e04b      	b.n	800074a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <GPIO_PeriClockControl+0xec>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a26      	ldr	r2, [pc, #152]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c6:	e040      	b.n	800074a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a26      	ldr	r2, [pc, #152]	; (8000764 <GPIO_PeriClockControl+0xf0>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006dc:	e035      	b.n	800074a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <GPIO_PeriClockControl+0xf4>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006ec:	f043 0310 	orr.w	r3, r3, #16
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f2:	e02a      	b.n	800074a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a1d      	ldr	r2, [pc, #116]	; (800076c <GPIO_PeriClockControl+0xf8>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a15      	ldr	r2, [pc, #84]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 8000702:	f043 0320 	orr.w	r3, r3, #32
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000708:	e01f      	b.n	800074a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a18      	ldr	r2, [pc, #96]	; (8000770 <GPIO_PeriClockControl+0xfc>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a10      	ldr	r2, [pc, #64]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800071e:	e014      	b.n	800074a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <GPIO_PeriClockControl+0x100>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 800072e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000732:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000734:	e009      	b.n	800074a <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <GPIO_PeriClockControl+0x104>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d105      	bne.n	800074a <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <GPIO_PeriClockControl+0xe4>)
 8000744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40020000 	.word	0x40020000
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400
 8000760:	40020800 	.word	0x40020800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40021000 	.word	0x40021000
 800076c:	40021400 	.word	0x40021400
 8000770:	40021800 	.word	0x40021800
 8000774:	40021c00 	.word	0x40021c00
 8000778:	40022000 	.word	0x40022000

0800077c <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2101      	movs	r1, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff70 	bl	8000674 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d820      	bhi.n	80007de <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	2103      	movs	r1, #3
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	4619      	mov	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	400a      	ands	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	430a      	orrs	r2, r1
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e0cb      	b.n	8000976 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	795b      	ldrb	r3, [r3, #5]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d117      	bne.n	8000816 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e6:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <GPIO_Init+0x198>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	7912      	ldrb	r2, [r2, #4]
 80007ee:	4611      	mov	r1, r2
 80007f0:	2201      	movs	r2, #1
 80007f2:	408a      	lsls	r2, r1
 80007f4:	4611      	mov	r1, r2
 80007f6:	4a47      	ldr	r2, [pc, #284]	; (8000914 <GPIO_Init+0x198>)
 80007f8:	430b      	orrs	r3, r1
 80007fa:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007fc:	4b45      	ldr	r3, [pc, #276]	; (8000914 <GPIO_Init+0x198>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	7912      	ldrb	r2, [r2, #4]
 8000804:	4611      	mov	r1, r2
 8000806:	2201      	movs	r2, #1
 8000808:	408a      	lsls	r2, r1
 800080a:	43d2      	mvns	r2, r2
 800080c:	4611      	mov	r1, r2
 800080e:	4a41      	ldr	r2, [pc, #260]	; (8000914 <GPIO_Init+0x198>)
 8000810:	400b      	ands	r3, r1
 8000812:	6093      	str	r3, [r2, #8]
 8000814:	e035      	b.n	8000882 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	2b05      	cmp	r3, #5
 800081c:	d117      	bne.n	800084e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <GPIO_Init+0x198>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	7912      	ldrb	r2, [r2, #4]
 8000826:	4611      	mov	r1, r2
 8000828:	2201      	movs	r2, #1
 800082a:	408a      	lsls	r2, r1
 800082c:	4611      	mov	r1, r2
 800082e:	4a39      	ldr	r2, [pc, #228]	; (8000914 <GPIO_Init+0x198>)
 8000830:	430b      	orrs	r3, r1
 8000832:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000834:	4b37      	ldr	r3, [pc, #220]	; (8000914 <GPIO_Init+0x198>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	7912      	ldrb	r2, [r2, #4]
 800083c:	4611      	mov	r1, r2
 800083e:	2201      	movs	r2, #1
 8000840:	408a      	lsls	r2, r1
 8000842:	43d2      	mvns	r2, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a33      	ldr	r2, [pc, #204]	; (8000914 <GPIO_Init+0x198>)
 8000848:	400b      	ands	r3, r1
 800084a:	60d3      	str	r3, [r2, #12]
 800084c:	e019      	b.n	8000882 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	795b      	ldrb	r3, [r3, #5]
 8000852:	2b06      	cmp	r3, #6
 8000854:	d115      	bne.n	8000882 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <GPIO_Init+0x198>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	7912      	ldrb	r2, [r2, #4]
 800085e:	4611      	mov	r1, r2
 8000860:	2201      	movs	r2, #1
 8000862:	408a      	lsls	r2, r1
 8000864:	4611      	mov	r1, r2
 8000866:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <GPIO_Init+0x198>)
 8000868:	430b      	orrs	r3, r1
 800086a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <GPIO_Init+0x198>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	7912      	ldrb	r2, [r2, #4]
 8000874:	4611      	mov	r1, r2
 8000876:	2201      	movs	r2, #1
 8000878:	408a      	lsls	r2, r1
 800087a:	4611      	mov	r1, r2
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <GPIO_Init+0x198>)
 800087e:	430b      	orrs	r3, r1
 8000880:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a1f      	ldr	r2, [pc, #124]	; (8000918 <GPIO_Init+0x19c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d04e      	beq.n	800093c <GPIO_Init+0x1c0>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a1e      	ldr	r2, [pc, #120]	; (800091c <GPIO_Init+0x1a0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d032      	beq.n	800090e <GPIO_Init+0x192>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <GPIO_Init+0x1a4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d02b      	beq.n	800090a <GPIO_Init+0x18e>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <GPIO_Init+0x1a8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d024      	beq.n	8000906 <GPIO_Init+0x18a>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <GPIO_Init+0x1ac>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d01d      	beq.n	8000902 <GPIO_Init+0x186>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <GPIO_Init+0x1b0>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d016      	beq.n	80008fe <GPIO_Init+0x182>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <GPIO_Init+0x1b4>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d00f      	beq.n	80008fa <GPIO_Init+0x17e>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <GPIO_Init+0x1b8>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d008      	beq.n	80008f6 <GPIO_Init+0x17a>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <GPIO_Init+0x1bc>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <GPIO_Init+0x176>
 80008ee:	2308      	movs	r3, #8
 80008f0:	e025      	b.n	800093e <GPIO_Init+0x1c2>
 80008f2:	2300      	movs	r3, #0
 80008f4:	e023      	b.n	800093e <GPIO_Init+0x1c2>
 80008f6:	2307      	movs	r3, #7
 80008f8:	e021      	b.n	800093e <GPIO_Init+0x1c2>
 80008fa:	2306      	movs	r3, #6
 80008fc:	e01f      	b.n	800093e <GPIO_Init+0x1c2>
 80008fe:	2305      	movs	r3, #5
 8000900:	e01d      	b.n	800093e <GPIO_Init+0x1c2>
 8000902:	2304      	movs	r3, #4
 8000904:	e01b      	b.n	800093e <GPIO_Init+0x1c2>
 8000906:	2303      	movs	r3, #3
 8000908:	e019      	b.n	800093e <GPIO_Init+0x1c2>
 800090a:	2302      	movs	r3, #2
 800090c:	e017      	b.n	800093e <GPIO_Init+0x1c2>
 800090e:	2301      	movs	r3, #1
 8000910:	e015      	b.n	800093e <GPIO_Init+0x1c2>
 8000912:	bf00      	nop
 8000914:	40013c00 	.word	0x40013c00
 8000918:	40020000 	.word	0x40020000
 800091c:	40020400 	.word	0x40020400
 8000920:	40020800 	.word	0x40020800
 8000924:	40020c00 	.word	0x40020c00
 8000928:	40021000 	.word	0x40021000
 800092c:	40021400 	.word	0x40021400
 8000930:	40021800 	.word	0x40021800
 8000934:	40021c00 	.word	0x40021c00
 8000938:	40022000 	.word	0x40022000
 800093c:	2300      	movs	r3, #0
 800093e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000940:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <GPIO_Init+0x32c>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	4a58      	ldr	r2, [pc, #352]	; (8000aa8 <GPIO_Init+0x32c>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800094c:	7c7a      	ldrb	r2, [r7, #17]
 800094e:	7cbb      	ldrb	r3, [r7, #18]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	fa02 f103 	lsl.w	r1, r2, r3
 8000956:	4a55      	ldr	r2, [pc, #340]	; (8000aac <GPIO_Init+0x330>)
 8000958:	7cfb      	ldrb	r3, [r7, #19]
 800095a:	3302      	adds	r3, #2
 800095c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000960:	4b53      	ldr	r3, [pc, #332]	; (8000ab0 <GPIO_Init+0x334>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	7912      	ldrb	r2, [r2, #4]
 8000968:	4611      	mov	r1, r2
 800096a:	2201      	movs	r2, #1
 800096c:	408a      	lsls	r2, r1
 800096e:	4611      	mov	r1, r2
 8000970:	4a4f      	ldr	r2, [pc, #316]	; (8000ab0 <GPIO_Init+0x334>)
 8000972:	430b      	orrs	r3, r1
 8000974:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	799b      	ldrb	r3, [r3, #6]
 800097a:	461a      	mov	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	791b      	ldrb	r3, [r3, #4]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	791b      	ldrb	r3, [r3, #4]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2103      	movs	r1, #3
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	4619      	mov	r1, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	400a      	ands	r2, r1
 80009a4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	6899      	ldr	r1, [r3, #8]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	79db      	ldrb	r3, [r3, #7]
 80009ba:	461a      	mov	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	68da      	ldr	r2, [r3, #12]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	2103      	movs	r1, #3
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	400a      	ands	r2, r1
 80009e4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	68d9      	ldr	r1, [r3, #12]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7a1b      	ldrb	r3, [r3, #8]
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	791b      	ldrb	r3, [r3, #4]
 8000a10:	4619      	mov	r1, r3
 8000a12:	2301      	movs	r3, #1
 8000a14:	408b      	lsls	r3, r1
 8000a16:	43db      	mvns	r3, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	400a      	ands	r2, r1
 8000a20:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6859      	ldr	r1, [r3, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	795b      	ldrb	r3, [r3, #5]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d131      	bne.n	8000a9e <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	7c3a      	ldrb	r2, [r7, #16]
 8000a52:	3208      	adds	r2, #8
 8000a54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	7c3a      	ldrb	r2, [r7, #16]
 8000a6c:	4001      	ands	r1, r0
 8000a6e:	3208      	adds	r2, #8
 8000a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	7c3a      	ldrb	r2, [r7, #16]
 8000a7a:	3208      	adds	r2, #8
 8000a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7a5b      	ldrb	r3, [r3, #9]
 8000a84:	461a      	mov	r2, r3
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	7c3a      	ldrb	r2, [r7, #16]
 8000a96:	4301      	orrs	r1, r0
 8000a98:	3208      	adds	r2, #8
 8000a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40013800 	.word	0x40013800
 8000ab0:	40013c00 	.word	0x40013c00

08000ab4 <GPIO_ReadFromInputPin>:
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691a      	ldr	r2, [r3, #16]
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]

   return value;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};


uint32_t RCC_GetPCLK1Value(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <RCC_GetPCLK1Value+0x9c>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000af4:	7a7b      	ldrb	r3, [r7, #9]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <RCC_GetPCLK1Value+0xa0>)
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	e00b      	b.n	8000b18 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000b00:	7a7b      	ldrb	r3, [r7, #9]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d102      	bne.n	8000b0c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <RCC_GetPCLK1Value+0xa4>)
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	e005      	b.n	8000b18 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000b0c:	7a7b      	ldrb	r3, [r7, #9]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d102      	bne.n	8000b18 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000b12:	f000 f88d 	bl	8000c30 <RCC_GetPLLOutputClock>
 8000b16:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <RCC_GetPCLK1Value+0x9c>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	091b      	lsrs	r3, r3, #4
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	f003 030f 	and.w	r3, r3, #15
 8000b24:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000b26:	7a3b      	ldrb	r3, [r7, #8]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	d802      	bhi.n	8000b32 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	72fb      	strb	r3, [r7, #11]
 8000b30:	e005      	b.n	8000b3e <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000b32:	7a3b      	ldrb	r3, [r7, #8]
 8000b34:	3b08      	subs	r3, #8
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <RCC_GetPCLK1Value+0xa8>)
 8000b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b3c:	72fb      	strb	r3, [r7, #11]
	}


	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <RCC_GetPCLK1Value+0x9c>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	0a9b      	lsrs	r3, r3, #10
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000b4c:	7a3b      	ldrb	r3, [r7, #8]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d802      	bhi.n	8000b58 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	72bb      	strb	r3, [r7, #10]
 8000b56:	e004      	b.n	8000b62 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000b58:	7a3b      	ldrb	r3, [r7, #8]
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <RCC_GetPCLK1Value+0xac>)
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
 8000b60:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000b62:	7afb      	ldrb	r3, [r7, #11]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b6a:	7abb      	ldrb	r3, [r7, #10]
 8000b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b70:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	00f42400 	.word	0x00f42400
 8000b84:	007a1200 	.word	0x007a1200
 8000b88:	2000000c 	.word	0x2000000c
 8000b8c:	2000001c 	.word	0x2000001c

08000b90 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <RCC_GetPCLK2Value+0x8c>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000ba8:	7a7b      	ldrb	r3, [r7, #9]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <RCC_GetPCLK2Value+0x90>)
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e001      	b.n	8000bb8 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <RCC_GetPCLK2Value+0x94>)
 8000bb6:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <RCC_GetPCLK2Value+0x8c>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b07      	cmp	r3, #7
 8000bc8:	d802      	bhi.n	8000bd0 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	72fb      	strb	r3, [r7, #11]
 8000bce:	e005      	b.n	8000bdc <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b08      	subs	r3, #8
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <RCC_GetPCLK2Value+0x98>)
 8000bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bda:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <RCC_GetPCLK2Value+0x8c>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	0b5b      	lsrs	r3, r3, #13
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d802      	bhi.n	8000bf4 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	72bb      	strb	r3, [r7, #10]
 8000bf2:	e004      	b.n	8000bfe <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <RCC_GetPCLK2Value+0x9c>)
 8000bfa:	5cd3      	ldrb	r3, [r2, r3]
 8000bfc:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000bfe:	7afb      	ldrb	r3, [r7, #11]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c06:	7abb      	ldrb	r3, [r7, #10]
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000c0e:	683b      	ldr	r3, [r7, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	00f42400 	.word	0x00f42400
 8000c24:	007a1200 	.word	0x007a1200
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	2000001c 	.word	0x2000001c

08000c30 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

	return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
	...

08000c40 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a31      	ldr	r2, [pc, #196]	; (8000d18 <USART_SetBaudRate+0xd8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d003      	beq.n	8000c5e <USART_SetBaudRate+0x1e>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a30      	ldr	r2, [pc, #192]	; (8000d1c <USART_SetBaudRate+0xdc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d103      	bne.n	8000c66 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000c5e:	f7ff ff97 	bl	8000b90 <RCC_GetPCLK2Value>
 8000c62:	61f8      	str	r0, [r7, #28]
 8000c64:	e002      	b.n	8000c6c <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000c66:	f7ff ff3b 	bl	8000ae0 <RCC_GetPCLK1Value>
 8000c6a:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00b      	beq.n	8000c90 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000c78:	69fa      	ldr	r2, [r7, #28]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	009a      	lsls	r2, r3, #2
 8000c82:	441a      	add	r2, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	e00a      	b.n	8000ca6 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	009a      	lsls	r2, r3, #2
 8000c9a:	441a      	add	r2, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca4:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <USART_SetBaudRate+0xe0>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2264      	movs	r2, #100	; 0x64
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00a      	beq.n	8000cec <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	3332      	adds	r3, #50	; 0x32
 8000cdc:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <USART_SetBaudRate+0xe0>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e009      	b.n	8000d00 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	3332      	adds	r3, #50	; 0x32
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <USART_SetBaudRate+0xe0>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	095b      	lsrs	r3, r3, #5
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	609a      	str	r2, [r3, #8]
}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40011400 	.word	0x40011400
 8000d20:	51eb851f 	.word	0x51eb851f

08000d24 <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f892 	bl	8000e60 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	791b      	ldrb	r3, [r3, #4]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d104      	bne.n	8000d4e <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e010      	b.n	8000d70 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	791b      	ldrb	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d104      	bne.n	8000d60 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	e007      	b.n	8000d70 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d103      	bne.n	8000d70 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 030c 	orr.w	r3, r3, #12
 8000d6e:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7b5b      	ldrb	r3, [r3, #13]
 8000d74:	031b      	lsls	r3, r3, #12
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7b9b      	ldrb	r3, [r3, #14]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d104      	bne.n	8000d90 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e00b      	b.n	8000da8 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7b9b      	ldrb	r3, [r3, #14]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d107      	bne.n	8000da8 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7b1b      	ldrb	r3, [r3, #12]
 8000db8:	031b      	lsls	r3, r3, #12
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7bdb      	ldrb	r3, [r3, #15]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d104      	bne.n	8000de0 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e014      	b.n	8000e0a <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7bdb      	ldrb	r3, [r3, #15]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d104      	bne.n	8000df2 <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e00b      	b.n	8000e0a <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7bdb      	ldrb	r3, [r3, #15]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d107      	bne.n	8000e0a <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e00:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	f7ff ff0f 	bl	8000c40 <USART_SetBaudRate>

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	460b      	mov	r3, r1
 8000e34:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d106      	bne.n	8000e4a <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000e48:	e005      	b.n	8000e56 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60da      	str	r2, [r3, #12]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d12a      	bne.n	8000ec8 <USART_PeriClockControl+0x68>
	{
		if(pUSARTx == USART1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <USART_PeriClockControl+0x74>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d106      	bne.n	8000e88 <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <USART_PeriClockControl+0x78>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <USART_PeriClockControl+0x78>)
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8000e86:	e01f      	b.n	8000ec8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a14      	ldr	r2, [pc, #80]	; (8000edc <USART_PeriClockControl+0x7c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d106      	bne.n	8000e9e <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <USART_PeriClockControl+0x78>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <USART_PeriClockControl+0x78>)
 8000e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e9c:	e014      	b.n	8000ec8 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART3)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <USART_PeriClockControl+0x80>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d106      	bne.n	8000eb4 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <USART_PeriClockControl+0x78>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <USART_PeriClockControl+0x78>)
 8000eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eb2:	e009      	b.n	8000ec8 <USART_PeriClockControl+0x68>
		else if (pUSARTx == UART4)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <USART_PeriClockControl+0x84>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d105      	bne.n	8000ec8 <USART_PeriClockControl+0x68>
			UART4_PCCK_EN();
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <USART_PeriClockControl+0x78>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <USART_PeriClockControl+0x78>)
 8000ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40004400 	.word	0x40004400
 8000ee0:	40004800 	.word	0x40004800
 8000ee4:	40004c00 	.word	0x40004c00

08000ee8 <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	e031      	b.n	8000f86 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000f22:	bf00      	nop
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ffdc 	bl	8000ee8 <USART_GetFlagStatus>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f6      	beq.n	8000f24 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	7b5b      	ldrb	r3, [r3, #13]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d118      	bne.n	8000f70 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f50:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	7b9b      	ldrb	r3, [r3, #14]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d106      	bne.n	8000f68 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	e00b      	b.n	8000f80 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	e007      	b.n	8000f80 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d3c9      	bcc.n	8000f22 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000f8e:	bf00      	nop
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2140      	movs	r1, #64	; 0x40
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffa6 	bl	8000ee8 <USART_GetFlagStatus>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f6      	beq.n	8000f90 <USART_SendData+0x80>
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <USART_ReceiveDataIT>:
 *
 * @Note              -

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fbe:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d014      	beq.n	8000ff0 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0220 	orr.w	r2, r2, #32
 8000fee:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	371c      	adds	r7, #28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <USART_IRQInterruptConfig>:
 *
 * @Note              -

 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d133      	bne.n	800107a <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b1f      	cmp	r3, #31
 8001016:	d80a      	bhi.n	800102e <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8001018:	4b34      	ldr	r3, [pc, #208]	; (80010ec <USART_IRQInterruptConfig+0xf0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	79fa      	ldrb	r2, [r7, #7]
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	4611      	mov	r1, r2
 8001026:	4a31      	ldr	r2, [pc, #196]	; (80010ec <USART_IRQInterruptConfig+0xf0>)
 8001028:	430b      	orrs	r3, r1
 800102a:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 800102c:	e059      	b.n	80010e2 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b1f      	cmp	r3, #31
 8001032:	d90f      	bls.n	8001054 <USART_IRQInterruptConfig+0x58>
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b3f      	cmp	r3, #63	; 0x3f
 8001038:	d80c      	bhi.n	8001054 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <USART_IRQInterruptConfig+0xf4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	f002 021f 	and.w	r2, r2, #31
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	4611      	mov	r1, r2
 800104c:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <USART_IRQInterruptConfig+0xf4>)
 800104e:	430b      	orrs	r3, r1
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e046      	b.n	80010e2 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b3f      	cmp	r3, #63	; 0x3f
 8001058:	d943      	bls.n	80010e2 <USART_IRQInterruptConfig+0xe6>
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b5f      	cmp	r3, #95	; 0x5f
 800105e:	d840      	bhi.n	80010e2 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <USART_IRQInterruptConfig+0xf8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	4611      	mov	r1, r2
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <USART_IRQInterruptConfig+0xf8>)
 8001074:	430b      	orrs	r3, r1
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	e033      	b.n	80010e2 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b1f      	cmp	r3, #31
 800107e:	d80a      	bhi.n	8001096 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <USART_IRQInterruptConfig+0xfc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	4611      	mov	r1, r2
 800108e:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <USART_IRQInterruptConfig+0xfc>)
 8001090:	430b      	orrs	r3, r1
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	e025      	b.n	80010e2 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b1f      	cmp	r3, #31
 800109a:	d90f      	bls.n	80010bc <USART_IRQInterruptConfig+0xc0>
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b3f      	cmp	r3, #63	; 0x3f
 80010a0:	d80c      	bhi.n	80010bc <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <USART_IRQInterruptConfig+0x100>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	f002 021f 	and.w	r2, r2, #31
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <USART_IRQInterruptConfig+0x100>)
 80010b6:	430b      	orrs	r3, r1
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e012      	b.n	80010e2 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d90f      	bls.n	80010e2 <USART_IRQInterruptConfig+0xe6>
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b5f      	cmp	r3, #95	; 0x5f
 80010c6:	d80c      	bhi.n	80010e2 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <USART_IRQInterruptConfig+0x104>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	4611      	mov	r1, r2
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <USART_IRQInterruptConfig+0x104>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	e7ff      	b.n	80010e2 <USART_IRQInterruptConfig+0xe6>
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000e104 	.word	0xe000e104
 80010f4:	e000e10c 	.word	0xe000e10c
 80010f8:	e000e180 	.word	0xe000e180
 80010fc:	e000e184 	.word	0xe000e184
 8001100:	e000e18c 	.word	0xe000e18c

08001104 <USART_IRQHandling>:
 *
 * @Note              -

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001116:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001122:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d021      	beq.n	800116e <USART_IRQHandling+0x6a>
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01e      	beq.n	800116e <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d119      	bne.n	800116e <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d115      	bne.n	800116e <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001150:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8001166:	2100      	movs	r1, #0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff f97f 	bl	800046c <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001178:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001184:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d055      	beq.n	8001238 <USART_IRQHandling+0x134>
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d052      	beq.n	8001238 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d14d      	bne.n	8001238 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d03d      	beq.n	8001220 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7b5b      	ldrb	r3, [r3, #13]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d129      	bne.n	8001200 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011c0:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7b9b      	ldrb	r3, [r3, #14]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	1e9a      	subs	r2, r3, #2
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	e01a      	b.n	8001220 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
 80011fe:	e00f      	b.n	8001220 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d107      	bne.n	8001238 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001236:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d073      	beq.n	800133e <USART_IRQHandling+0x23a>
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d070      	beq.n	800133e <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001262:	2b01      	cmp	r3, #1
 8001264:	d16b      	bne.n	800133e <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d053      	beq.n	8001316 <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7b5b      	ldrb	r3, [r3, #13]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d12f      	bne.n	80012d6 <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7b9b      	ldrb	r3, [r3, #14]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	b29a      	uxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800128e:	b292      	uxth	r2, r2
 8001290:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	1e9a      	subs	r2, r3, #2
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	61da      	str	r2, [r3, #28]
 80012b0:	e031      	b.n	8001316 <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	61da      	str	r2, [r3, #28]
 80012d4:	e01f      	b.n	8001316 <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b9b      	ldrb	r3, [r3, #14]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d107      	bne.n	80012ee <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e009      	b.n	8001302 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	615a      	str	r2, [r3, #20]
					pUSARTHandle->RxLen-=1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10f      	bne.n	800133e <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0220 	bic.w	r2, r2, #32
 800132c:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8001336:	2101      	movs	r1, #1
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff f897 	bl	800046c <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001348:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001354:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001360:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00e      	beq.n	8001386 <USART_IRQHandling+0x282>
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800137c:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 800137e:	2103      	movs	r1, #3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff f873 	bl	800046c <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00f      	beq.n	80013c4 <USART_IRQHandling+0x2c0>
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00c      	beq.n	80013c4 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	f023 0310 	bic.w	r3, r3, #16
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 80013bc:	2102      	movs	r1, #2
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff f854 	bl	800046c <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 0305 	and.w	r3, r3, #5
 80013da:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <USART_IRQHandling+0x2ec>
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80013e8:	2107      	movs	r1, #7
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff f83e 	bl	800046c <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]

	if(temp2 )
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d01e      	beq.n	8001440 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001414:	2105      	movs	r1, #5
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff f828 	bl	800046c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8001426:	2106      	movs	r1, #6
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff f81f 	bl	800046c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001438:	2107      	movs	r1, #7
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff f816 	bl	800046c <USART_ApplicationEventCallback>
		}
	}


}
 8001440:	bf00      	nop
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <__errno>:
 8001448:	4b01      	ldr	r3, [pc, #4]	; (8001450 <__errno+0x8>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000020 	.word	0x20000020

08001454 <__libc_init_array>:
 8001454:	b570      	push	{r4, r5, r6, lr}
 8001456:	4d0d      	ldr	r5, [pc, #52]	; (800148c <__libc_init_array+0x38>)
 8001458:	4c0d      	ldr	r4, [pc, #52]	; (8001490 <__libc_init_array+0x3c>)
 800145a:	1b64      	subs	r4, r4, r5
 800145c:	10a4      	asrs	r4, r4, #2
 800145e:	2600      	movs	r6, #0
 8001460:	42a6      	cmp	r6, r4
 8001462:	d109      	bne.n	8001478 <__libc_init_array+0x24>
 8001464:	4d0b      	ldr	r5, [pc, #44]	; (8001494 <__libc_init_array+0x40>)
 8001466:	4c0c      	ldr	r4, [pc, #48]	; (8001498 <__libc_init_array+0x44>)
 8001468:	f001 f81c 	bl	80024a4 <_init>
 800146c:	1b64      	subs	r4, r4, r5
 800146e:	10a4      	asrs	r4, r4, #2
 8001470:	2600      	movs	r6, #0
 8001472:	42a6      	cmp	r6, r4
 8001474:	d105      	bne.n	8001482 <__libc_init_array+0x2e>
 8001476:	bd70      	pop	{r4, r5, r6, pc}
 8001478:	f855 3b04 	ldr.w	r3, [r5], #4
 800147c:	4798      	blx	r3
 800147e:	3601      	adds	r6, #1
 8001480:	e7ee      	b.n	8001460 <__libc_init_array+0xc>
 8001482:	f855 3b04 	ldr.w	r3, [r5], #4
 8001486:	4798      	blx	r3
 8001488:	3601      	adds	r6, #1
 800148a:	e7f2      	b.n	8001472 <__libc_init_array+0x1e>
 800148c:	080025cc 	.word	0x080025cc
 8001490:	080025cc 	.word	0x080025cc
 8001494:	080025cc 	.word	0x080025cc
 8001498:	080025d0 	.word	0x080025d0

0800149c <memset>:
 800149c:	4402      	add	r2, r0
 800149e:	4603      	mov	r3, r0
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d100      	bne.n	80014a6 <memset+0xa>
 80014a4:	4770      	bx	lr
 80014a6:	f803 1b01 	strb.w	r1, [r3], #1
 80014aa:	e7f9      	b.n	80014a0 <memset+0x4>

080014ac <iprintf>:
 80014ac:	b40f      	push	{r0, r1, r2, r3}
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <iprintf+0x2c>)
 80014b0:	b513      	push	{r0, r1, r4, lr}
 80014b2:	681c      	ldr	r4, [r3, #0]
 80014b4:	b124      	cbz	r4, 80014c0 <iprintf+0x14>
 80014b6:	69a3      	ldr	r3, [r4, #24]
 80014b8:	b913      	cbnz	r3, 80014c0 <iprintf+0x14>
 80014ba:	4620      	mov	r0, r4
 80014bc:	f000 fa5a 	bl	8001974 <__sinit>
 80014c0:	ab05      	add	r3, sp, #20
 80014c2:	9a04      	ldr	r2, [sp, #16]
 80014c4:	68a1      	ldr	r1, [r4, #8]
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	4620      	mov	r0, r4
 80014ca:	f000 fc5f 	bl	8001d8c <_vfiprintf_r>
 80014ce:	b002      	add	sp, #8
 80014d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014d4:	b004      	add	sp, #16
 80014d6:	4770      	bx	lr
 80014d8:	20000020 	.word	0x20000020

080014dc <_puts_r>:
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	460e      	mov	r6, r1
 80014e0:	4605      	mov	r5, r0
 80014e2:	b118      	cbz	r0, 80014ec <_puts_r+0x10>
 80014e4:	6983      	ldr	r3, [r0, #24]
 80014e6:	b90b      	cbnz	r3, 80014ec <_puts_r+0x10>
 80014e8:	f000 fa44 	bl	8001974 <__sinit>
 80014ec:	69ab      	ldr	r3, [r5, #24]
 80014ee:	68ac      	ldr	r4, [r5, #8]
 80014f0:	b913      	cbnz	r3, 80014f8 <_puts_r+0x1c>
 80014f2:	4628      	mov	r0, r5
 80014f4:	f000 fa3e 	bl	8001974 <__sinit>
 80014f8:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <_puts_r+0xd0>)
 80014fa:	429c      	cmp	r4, r3
 80014fc:	d120      	bne.n	8001540 <_puts_r+0x64>
 80014fe:	686c      	ldr	r4, [r5, #4]
 8001500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001502:	07db      	lsls	r3, r3, #31
 8001504:	d405      	bmi.n	8001512 <_puts_r+0x36>
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	0598      	lsls	r0, r3, #22
 800150a:	d402      	bmi.n	8001512 <_puts_r+0x36>
 800150c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800150e:	f000 facf 	bl	8001ab0 <__retarget_lock_acquire_recursive>
 8001512:	89a3      	ldrh	r3, [r4, #12]
 8001514:	0719      	lsls	r1, r3, #28
 8001516:	d51d      	bpl.n	8001554 <_puts_r+0x78>
 8001518:	6923      	ldr	r3, [r4, #16]
 800151a:	b1db      	cbz	r3, 8001554 <_puts_r+0x78>
 800151c:	3e01      	subs	r6, #1
 800151e:	68a3      	ldr	r3, [r4, #8]
 8001520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001524:	3b01      	subs	r3, #1
 8001526:	60a3      	str	r3, [r4, #8]
 8001528:	bb39      	cbnz	r1, 800157a <_puts_r+0x9e>
 800152a:	2b00      	cmp	r3, #0
 800152c:	da38      	bge.n	80015a0 <_puts_r+0xc4>
 800152e:	4622      	mov	r2, r4
 8001530:	210a      	movs	r1, #10
 8001532:	4628      	mov	r0, r5
 8001534:	f000 f848 	bl	80015c8 <__swbuf_r>
 8001538:	3001      	adds	r0, #1
 800153a:	d011      	beq.n	8001560 <_puts_r+0x84>
 800153c:	250a      	movs	r5, #10
 800153e:	e011      	b.n	8001564 <_puts_r+0x88>
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <_puts_r+0xd4>)
 8001542:	429c      	cmp	r4, r3
 8001544:	d101      	bne.n	800154a <_puts_r+0x6e>
 8001546:	68ac      	ldr	r4, [r5, #8]
 8001548:	e7da      	b.n	8001500 <_puts_r+0x24>
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <_puts_r+0xd8>)
 800154c:	429c      	cmp	r4, r3
 800154e:	bf08      	it	eq
 8001550:	68ec      	ldreq	r4, [r5, #12]
 8001552:	e7d5      	b.n	8001500 <_puts_r+0x24>
 8001554:	4621      	mov	r1, r4
 8001556:	4628      	mov	r0, r5
 8001558:	f000 f888 	bl	800166c <__swsetup_r>
 800155c:	2800      	cmp	r0, #0
 800155e:	d0dd      	beq.n	800151c <_puts_r+0x40>
 8001560:	f04f 35ff 	mov.w	r5, #4294967295
 8001564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001566:	07da      	lsls	r2, r3, #31
 8001568:	d405      	bmi.n	8001576 <_puts_r+0x9a>
 800156a:	89a3      	ldrh	r3, [r4, #12]
 800156c:	059b      	lsls	r3, r3, #22
 800156e:	d402      	bmi.n	8001576 <_puts_r+0x9a>
 8001570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001572:	f000 fa9e 	bl	8001ab2 <__retarget_lock_release_recursive>
 8001576:	4628      	mov	r0, r5
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	2b00      	cmp	r3, #0
 800157c:	da04      	bge.n	8001588 <_puts_r+0xac>
 800157e:	69a2      	ldr	r2, [r4, #24]
 8001580:	429a      	cmp	r2, r3
 8001582:	dc06      	bgt.n	8001592 <_puts_r+0xb6>
 8001584:	290a      	cmp	r1, #10
 8001586:	d004      	beq.n	8001592 <_puts_r+0xb6>
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	6022      	str	r2, [r4, #0]
 800158e:	7019      	strb	r1, [r3, #0]
 8001590:	e7c5      	b.n	800151e <_puts_r+0x42>
 8001592:	4622      	mov	r2, r4
 8001594:	4628      	mov	r0, r5
 8001596:	f000 f817 	bl	80015c8 <__swbuf_r>
 800159a:	3001      	adds	r0, #1
 800159c:	d1bf      	bne.n	800151e <_puts_r+0x42>
 800159e:	e7df      	b.n	8001560 <_puts_r+0x84>
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	250a      	movs	r5, #10
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	6022      	str	r2, [r4, #0]
 80015a8:	701d      	strb	r5, [r3, #0]
 80015aa:	e7db      	b.n	8001564 <_puts_r+0x88>
 80015ac:	08002558 	.word	0x08002558
 80015b0:	08002578 	.word	0x08002578
 80015b4:	08002538 	.word	0x08002538

080015b8 <puts>:
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <puts+0xc>)
 80015ba:	4601      	mov	r1, r0
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	f7ff bf8d 	b.w	80014dc <_puts_r>
 80015c2:	bf00      	nop
 80015c4:	20000020 	.word	0x20000020

080015c8 <__swbuf_r>:
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	460e      	mov	r6, r1
 80015cc:	4614      	mov	r4, r2
 80015ce:	4605      	mov	r5, r0
 80015d0:	b118      	cbz	r0, 80015da <__swbuf_r+0x12>
 80015d2:	6983      	ldr	r3, [r0, #24]
 80015d4:	b90b      	cbnz	r3, 80015da <__swbuf_r+0x12>
 80015d6:	f000 f9cd 	bl	8001974 <__sinit>
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <__swbuf_r+0x98>)
 80015dc:	429c      	cmp	r4, r3
 80015de:	d12b      	bne.n	8001638 <__swbuf_r+0x70>
 80015e0:	686c      	ldr	r4, [r5, #4]
 80015e2:	69a3      	ldr	r3, [r4, #24]
 80015e4:	60a3      	str	r3, [r4, #8]
 80015e6:	89a3      	ldrh	r3, [r4, #12]
 80015e8:	071a      	lsls	r2, r3, #28
 80015ea:	d52f      	bpl.n	800164c <__swbuf_r+0x84>
 80015ec:	6923      	ldr	r3, [r4, #16]
 80015ee:	b36b      	cbz	r3, 800164c <__swbuf_r+0x84>
 80015f0:	6923      	ldr	r3, [r4, #16]
 80015f2:	6820      	ldr	r0, [r4, #0]
 80015f4:	1ac0      	subs	r0, r0, r3
 80015f6:	6963      	ldr	r3, [r4, #20]
 80015f8:	b2f6      	uxtb	r6, r6
 80015fa:	4283      	cmp	r3, r0
 80015fc:	4637      	mov	r7, r6
 80015fe:	dc04      	bgt.n	800160a <__swbuf_r+0x42>
 8001600:	4621      	mov	r1, r4
 8001602:	4628      	mov	r0, r5
 8001604:	f000 f922 	bl	800184c <_fflush_r>
 8001608:	bb30      	cbnz	r0, 8001658 <__swbuf_r+0x90>
 800160a:	68a3      	ldr	r3, [r4, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	60a3      	str	r3, [r4, #8]
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	6022      	str	r2, [r4, #0]
 8001616:	701e      	strb	r6, [r3, #0]
 8001618:	6963      	ldr	r3, [r4, #20]
 800161a:	3001      	adds	r0, #1
 800161c:	4283      	cmp	r3, r0
 800161e:	d004      	beq.n	800162a <__swbuf_r+0x62>
 8001620:	89a3      	ldrh	r3, [r4, #12]
 8001622:	07db      	lsls	r3, r3, #31
 8001624:	d506      	bpl.n	8001634 <__swbuf_r+0x6c>
 8001626:	2e0a      	cmp	r6, #10
 8001628:	d104      	bne.n	8001634 <__swbuf_r+0x6c>
 800162a:	4621      	mov	r1, r4
 800162c:	4628      	mov	r0, r5
 800162e:	f000 f90d 	bl	800184c <_fflush_r>
 8001632:	b988      	cbnz	r0, 8001658 <__swbuf_r+0x90>
 8001634:	4638      	mov	r0, r7
 8001636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <__swbuf_r+0x9c>)
 800163a:	429c      	cmp	r4, r3
 800163c:	d101      	bne.n	8001642 <__swbuf_r+0x7a>
 800163e:	68ac      	ldr	r4, [r5, #8]
 8001640:	e7cf      	b.n	80015e2 <__swbuf_r+0x1a>
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <__swbuf_r+0xa0>)
 8001644:	429c      	cmp	r4, r3
 8001646:	bf08      	it	eq
 8001648:	68ec      	ldreq	r4, [r5, #12]
 800164a:	e7ca      	b.n	80015e2 <__swbuf_r+0x1a>
 800164c:	4621      	mov	r1, r4
 800164e:	4628      	mov	r0, r5
 8001650:	f000 f80c 	bl	800166c <__swsetup_r>
 8001654:	2800      	cmp	r0, #0
 8001656:	d0cb      	beq.n	80015f0 <__swbuf_r+0x28>
 8001658:	f04f 37ff 	mov.w	r7, #4294967295
 800165c:	e7ea      	b.n	8001634 <__swbuf_r+0x6c>
 800165e:	bf00      	nop
 8001660:	08002558 	.word	0x08002558
 8001664:	08002578 	.word	0x08002578
 8001668:	08002538 	.word	0x08002538

0800166c <__swsetup_r>:
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <__swsetup_r+0xcc>)
 800166e:	b570      	push	{r4, r5, r6, lr}
 8001670:	681d      	ldr	r5, [r3, #0]
 8001672:	4606      	mov	r6, r0
 8001674:	460c      	mov	r4, r1
 8001676:	b125      	cbz	r5, 8001682 <__swsetup_r+0x16>
 8001678:	69ab      	ldr	r3, [r5, #24]
 800167a:	b913      	cbnz	r3, 8001682 <__swsetup_r+0x16>
 800167c:	4628      	mov	r0, r5
 800167e:	f000 f979 	bl	8001974 <__sinit>
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <__swsetup_r+0xd0>)
 8001684:	429c      	cmp	r4, r3
 8001686:	d10f      	bne.n	80016a8 <__swsetup_r+0x3c>
 8001688:	686c      	ldr	r4, [r5, #4]
 800168a:	89a3      	ldrh	r3, [r4, #12]
 800168c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001690:	0719      	lsls	r1, r3, #28
 8001692:	d42c      	bmi.n	80016ee <__swsetup_r+0x82>
 8001694:	06dd      	lsls	r5, r3, #27
 8001696:	d411      	bmi.n	80016bc <__swsetup_r+0x50>
 8001698:	2309      	movs	r3, #9
 800169a:	6033      	str	r3, [r6, #0]
 800169c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80016a0:	81a3      	strh	r3, [r4, #12]
 80016a2:	f04f 30ff 	mov.w	r0, #4294967295
 80016a6:	e03e      	b.n	8001726 <__swsetup_r+0xba>
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <__swsetup_r+0xd4>)
 80016aa:	429c      	cmp	r4, r3
 80016ac:	d101      	bne.n	80016b2 <__swsetup_r+0x46>
 80016ae:	68ac      	ldr	r4, [r5, #8]
 80016b0:	e7eb      	b.n	800168a <__swsetup_r+0x1e>
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <__swsetup_r+0xd8>)
 80016b4:	429c      	cmp	r4, r3
 80016b6:	bf08      	it	eq
 80016b8:	68ec      	ldreq	r4, [r5, #12]
 80016ba:	e7e6      	b.n	800168a <__swsetup_r+0x1e>
 80016bc:	0758      	lsls	r0, r3, #29
 80016be:	d512      	bpl.n	80016e6 <__swsetup_r+0x7a>
 80016c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016c2:	b141      	cbz	r1, 80016d6 <__swsetup_r+0x6a>
 80016c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016c8:	4299      	cmp	r1, r3
 80016ca:	d002      	beq.n	80016d2 <__swsetup_r+0x66>
 80016cc:	4630      	mov	r0, r6
 80016ce:	f000 fa57 	bl	8001b80 <_free_r>
 80016d2:	2300      	movs	r3, #0
 80016d4:	6363      	str	r3, [r4, #52]	; 0x34
 80016d6:	89a3      	ldrh	r3, [r4, #12]
 80016d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016dc:	81a3      	strh	r3, [r4, #12]
 80016de:	2300      	movs	r3, #0
 80016e0:	6063      	str	r3, [r4, #4]
 80016e2:	6923      	ldr	r3, [r4, #16]
 80016e4:	6023      	str	r3, [r4, #0]
 80016e6:	89a3      	ldrh	r3, [r4, #12]
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	81a3      	strh	r3, [r4, #12]
 80016ee:	6923      	ldr	r3, [r4, #16]
 80016f0:	b94b      	cbnz	r3, 8001706 <__swsetup_r+0x9a>
 80016f2:	89a3      	ldrh	r3, [r4, #12]
 80016f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fc:	d003      	beq.n	8001706 <__swsetup_r+0x9a>
 80016fe:	4621      	mov	r1, r4
 8001700:	4630      	mov	r0, r6
 8001702:	f000 f9fd 	bl	8001b00 <__smakebuf_r>
 8001706:	89a0      	ldrh	r0, [r4, #12]
 8001708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800170c:	f010 0301 	ands.w	r3, r0, #1
 8001710:	d00a      	beq.n	8001728 <__swsetup_r+0xbc>
 8001712:	2300      	movs	r3, #0
 8001714:	60a3      	str	r3, [r4, #8]
 8001716:	6963      	ldr	r3, [r4, #20]
 8001718:	425b      	negs	r3, r3
 800171a:	61a3      	str	r3, [r4, #24]
 800171c:	6923      	ldr	r3, [r4, #16]
 800171e:	b943      	cbnz	r3, 8001732 <__swsetup_r+0xc6>
 8001720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001724:	d1ba      	bne.n	800169c <__swsetup_r+0x30>
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	0781      	lsls	r1, r0, #30
 800172a:	bf58      	it	pl
 800172c:	6963      	ldrpl	r3, [r4, #20]
 800172e:	60a3      	str	r3, [r4, #8]
 8001730:	e7f4      	b.n	800171c <__swsetup_r+0xb0>
 8001732:	2000      	movs	r0, #0
 8001734:	e7f7      	b.n	8001726 <__swsetup_r+0xba>
 8001736:	bf00      	nop
 8001738:	20000020 	.word	0x20000020
 800173c:	08002558 	.word	0x08002558
 8001740:	08002578 	.word	0x08002578
 8001744:	08002538 	.word	0x08002538

08001748 <__sflush_r>:
 8001748:	898a      	ldrh	r2, [r1, #12]
 800174a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174c:	4605      	mov	r5, r0
 800174e:	0710      	lsls	r0, r2, #28
 8001750:	460c      	mov	r4, r1
 8001752:	d457      	bmi.n	8001804 <__sflush_r+0xbc>
 8001754:	684b      	ldr	r3, [r1, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dc04      	bgt.n	8001764 <__sflush_r+0x1c>
 800175a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	dc01      	bgt.n	8001764 <__sflush_r+0x1c>
 8001760:	2000      	movs	r0, #0
 8001762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001766:	2e00      	cmp	r6, #0
 8001768:	d0fa      	beq.n	8001760 <__sflush_r+0x18>
 800176a:	2300      	movs	r3, #0
 800176c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001770:	682f      	ldr	r7, [r5, #0]
 8001772:	602b      	str	r3, [r5, #0]
 8001774:	d032      	beq.n	80017dc <__sflush_r+0x94>
 8001776:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001778:	89a3      	ldrh	r3, [r4, #12]
 800177a:	075a      	lsls	r2, r3, #29
 800177c:	d505      	bpl.n	800178a <__sflush_r+0x42>
 800177e:	6863      	ldr	r3, [r4, #4]
 8001780:	1ac0      	subs	r0, r0, r3
 8001782:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001784:	b10b      	cbz	r3, 800178a <__sflush_r+0x42>
 8001786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001788:	1ac0      	subs	r0, r0, r3
 800178a:	2300      	movs	r3, #0
 800178c:	4602      	mov	r2, r0
 800178e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001790:	6a21      	ldr	r1, [r4, #32]
 8001792:	4628      	mov	r0, r5
 8001794:	47b0      	blx	r6
 8001796:	1c43      	adds	r3, r0, #1
 8001798:	89a3      	ldrh	r3, [r4, #12]
 800179a:	d106      	bne.n	80017aa <__sflush_r+0x62>
 800179c:	6829      	ldr	r1, [r5, #0]
 800179e:	291d      	cmp	r1, #29
 80017a0:	d82c      	bhi.n	80017fc <__sflush_r+0xb4>
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <__sflush_r+0x100>)
 80017a4:	40ca      	lsrs	r2, r1
 80017a6:	07d6      	lsls	r6, r2, #31
 80017a8:	d528      	bpl.n	80017fc <__sflush_r+0xb4>
 80017aa:	2200      	movs	r2, #0
 80017ac:	6062      	str	r2, [r4, #4]
 80017ae:	04d9      	lsls	r1, r3, #19
 80017b0:	6922      	ldr	r2, [r4, #16]
 80017b2:	6022      	str	r2, [r4, #0]
 80017b4:	d504      	bpl.n	80017c0 <__sflush_r+0x78>
 80017b6:	1c42      	adds	r2, r0, #1
 80017b8:	d101      	bne.n	80017be <__sflush_r+0x76>
 80017ba:	682b      	ldr	r3, [r5, #0]
 80017bc:	b903      	cbnz	r3, 80017c0 <__sflush_r+0x78>
 80017be:	6560      	str	r0, [r4, #84]	; 0x54
 80017c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017c2:	602f      	str	r7, [r5, #0]
 80017c4:	2900      	cmp	r1, #0
 80017c6:	d0cb      	beq.n	8001760 <__sflush_r+0x18>
 80017c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017cc:	4299      	cmp	r1, r3
 80017ce:	d002      	beq.n	80017d6 <__sflush_r+0x8e>
 80017d0:	4628      	mov	r0, r5
 80017d2:	f000 f9d5 	bl	8001b80 <_free_r>
 80017d6:	2000      	movs	r0, #0
 80017d8:	6360      	str	r0, [r4, #52]	; 0x34
 80017da:	e7c2      	b.n	8001762 <__sflush_r+0x1a>
 80017dc:	6a21      	ldr	r1, [r4, #32]
 80017de:	2301      	movs	r3, #1
 80017e0:	4628      	mov	r0, r5
 80017e2:	47b0      	blx	r6
 80017e4:	1c41      	adds	r1, r0, #1
 80017e6:	d1c7      	bne.n	8001778 <__sflush_r+0x30>
 80017e8:	682b      	ldr	r3, [r5, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0c4      	beq.n	8001778 <__sflush_r+0x30>
 80017ee:	2b1d      	cmp	r3, #29
 80017f0:	d001      	beq.n	80017f6 <__sflush_r+0xae>
 80017f2:	2b16      	cmp	r3, #22
 80017f4:	d101      	bne.n	80017fa <__sflush_r+0xb2>
 80017f6:	602f      	str	r7, [r5, #0]
 80017f8:	e7b2      	b.n	8001760 <__sflush_r+0x18>
 80017fa:	89a3      	ldrh	r3, [r4, #12]
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001800:	81a3      	strh	r3, [r4, #12]
 8001802:	e7ae      	b.n	8001762 <__sflush_r+0x1a>
 8001804:	690f      	ldr	r7, [r1, #16]
 8001806:	2f00      	cmp	r7, #0
 8001808:	d0aa      	beq.n	8001760 <__sflush_r+0x18>
 800180a:	0793      	lsls	r3, r2, #30
 800180c:	680e      	ldr	r6, [r1, #0]
 800180e:	bf08      	it	eq
 8001810:	694b      	ldreq	r3, [r1, #20]
 8001812:	600f      	str	r7, [r1, #0]
 8001814:	bf18      	it	ne
 8001816:	2300      	movne	r3, #0
 8001818:	1bf6      	subs	r6, r6, r7
 800181a:	608b      	str	r3, [r1, #8]
 800181c:	2e00      	cmp	r6, #0
 800181e:	dd9f      	ble.n	8001760 <__sflush_r+0x18>
 8001820:	6a21      	ldr	r1, [r4, #32]
 8001822:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001826:	4633      	mov	r3, r6
 8001828:	463a      	mov	r2, r7
 800182a:	4628      	mov	r0, r5
 800182c:	47e0      	blx	ip
 800182e:	2800      	cmp	r0, #0
 8001830:	dc06      	bgt.n	8001840 <__sflush_r+0xf8>
 8001832:	89a3      	ldrh	r3, [r4, #12]
 8001834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001838:	81a3      	strh	r3, [r4, #12]
 800183a:	f04f 30ff 	mov.w	r0, #4294967295
 800183e:	e790      	b.n	8001762 <__sflush_r+0x1a>
 8001840:	4407      	add	r7, r0
 8001842:	1a36      	subs	r6, r6, r0
 8001844:	e7ea      	b.n	800181c <__sflush_r+0xd4>
 8001846:	bf00      	nop
 8001848:	20400001 	.word	0x20400001

0800184c <_fflush_r>:
 800184c:	b538      	push	{r3, r4, r5, lr}
 800184e:	690b      	ldr	r3, [r1, #16]
 8001850:	4605      	mov	r5, r0
 8001852:	460c      	mov	r4, r1
 8001854:	b913      	cbnz	r3, 800185c <_fflush_r+0x10>
 8001856:	2500      	movs	r5, #0
 8001858:	4628      	mov	r0, r5
 800185a:	bd38      	pop	{r3, r4, r5, pc}
 800185c:	b118      	cbz	r0, 8001866 <_fflush_r+0x1a>
 800185e:	6983      	ldr	r3, [r0, #24]
 8001860:	b90b      	cbnz	r3, 8001866 <_fflush_r+0x1a>
 8001862:	f000 f887 	bl	8001974 <__sinit>
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <_fflush_r+0x6c>)
 8001868:	429c      	cmp	r4, r3
 800186a:	d11b      	bne.n	80018a4 <_fflush_r+0x58>
 800186c:	686c      	ldr	r4, [r5, #4]
 800186e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0ef      	beq.n	8001856 <_fflush_r+0xa>
 8001876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001878:	07d0      	lsls	r0, r2, #31
 800187a:	d404      	bmi.n	8001886 <_fflush_r+0x3a>
 800187c:	0599      	lsls	r1, r3, #22
 800187e:	d402      	bmi.n	8001886 <_fflush_r+0x3a>
 8001880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001882:	f000 f915 	bl	8001ab0 <__retarget_lock_acquire_recursive>
 8001886:	4628      	mov	r0, r5
 8001888:	4621      	mov	r1, r4
 800188a:	f7ff ff5d 	bl	8001748 <__sflush_r>
 800188e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001890:	07da      	lsls	r2, r3, #31
 8001892:	4605      	mov	r5, r0
 8001894:	d4e0      	bmi.n	8001858 <_fflush_r+0xc>
 8001896:	89a3      	ldrh	r3, [r4, #12]
 8001898:	059b      	lsls	r3, r3, #22
 800189a:	d4dd      	bmi.n	8001858 <_fflush_r+0xc>
 800189c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800189e:	f000 f908 	bl	8001ab2 <__retarget_lock_release_recursive>
 80018a2:	e7d9      	b.n	8001858 <_fflush_r+0xc>
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <_fflush_r+0x70>)
 80018a6:	429c      	cmp	r4, r3
 80018a8:	d101      	bne.n	80018ae <_fflush_r+0x62>
 80018aa:	68ac      	ldr	r4, [r5, #8]
 80018ac:	e7df      	b.n	800186e <_fflush_r+0x22>
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <_fflush_r+0x74>)
 80018b0:	429c      	cmp	r4, r3
 80018b2:	bf08      	it	eq
 80018b4:	68ec      	ldreq	r4, [r5, #12]
 80018b6:	e7da      	b.n	800186e <_fflush_r+0x22>
 80018b8:	08002558 	.word	0x08002558
 80018bc:	08002578 	.word	0x08002578
 80018c0:	08002538 	.word	0x08002538

080018c4 <std>:
 80018c4:	2300      	movs	r3, #0
 80018c6:	b510      	push	{r4, lr}
 80018c8:	4604      	mov	r4, r0
 80018ca:	e9c0 3300 	strd	r3, r3, [r0]
 80018ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018d2:	6083      	str	r3, [r0, #8]
 80018d4:	8181      	strh	r1, [r0, #12]
 80018d6:	6643      	str	r3, [r0, #100]	; 0x64
 80018d8:	81c2      	strh	r2, [r0, #14]
 80018da:	6183      	str	r3, [r0, #24]
 80018dc:	4619      	mov	r1, r3
 80018de:	2208      	movs	r2, #8
 80018e0:	305c      	adds	r0, #92	; 0x5c
 80018e2:	f7ff fddb 	bl	800149c <memset>
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <std+0x38>)
 80018e8:	6263      	str	r3, [r4, #36]	; 0x24
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <std+0x3c>)
 80018ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <std+0x40>)
 80018f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <std+0x44>)
 80018f4:	6224      	str	r4, [r4, #32]
 80018f6:	6323      	str	r3, [r4, #48]	; 0x30
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	bf00      	nop
 80018fc:	08002335 	.word	0x08002335
 8001900:	08002357 	.word	0x08002357
 8001904:	0800238f 	.word	0x0800238f
 8001908:	080023b3 	.word	0x080023b3

0800190c <_cleanup_r>:
 800190c:	4901      	ldr	r1, [pc, #4]	; (8001914 <_cleanup_r+0x8>)
 800190e:	f000 b8af 	b.w	8001a70 <_fwalk_reent>
 8001912:	bf00      	nop
 8001914:	0800184d 	.word	0x0800184d

08001918 <__sfmoreglue>:
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	2268      	movs	r2, #104	; 0x68
 800191c:	1e4d      	subs	r5, r1, #1
 800191e:	4355      	muls	r5, r2
 8001920:	460e      	mov	r6, r1
 8001922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001926:	f000 f995 	bl	8001c54 <_malloc_r>
 800192a:	4604      	mov	r4, r0
 800192c:	b140      	cbz	r0, 8001940 <__sfmoreglue+0x28>
 800192e:	2100      	movs	r1, #0
 8001930:	e9c0 1600 	strd	r1, r6, [r0]
 8001934:	300c      	adds	r0, #12
 8001936:	60a0      	str	r0, [r4, #8]
 8001938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800193c:	f7ff fdae 	bl	800149c <memset>
 8001940:	4620      	mov	r0, r4
 8001942:	bd70      	pop	{r4, r5, r6, pc}

08001944 <__sfp_lock_acquire>:
 8001944:	4801      	ldr	r0, [pc, #4]	; (800194c <__sfp_lock_acquire+0x8>)
 8001946:	f000 b8b3 	b.w	8001ab0 <__retarget_lock_acquire_recursive>
 800194a:	bf00      	nop
 800194c:	200004cd 	.word	0x200004cd

08001950 <__sfp_lock_release>:
 8001950:	4801      	ldr	r0, [pc, #4]	; (8001958 <__sfp_lock_release+0x8>)
 8001952:	f000 b8ae 	b.w	8001ab2 <__retarget_lock_release_recursive>
 8001956:	bf00      	nop
 8001958:	200004cd 	.word	0x200004cd

0800195c <__sinit_lock_acquire>:
 800195c:	4801      	ldr	r0, [pc, #4]	; (8001964 <__sinit_lock_acquire+0x8>)
 800195e:	f000 b8a7 	b.w	8001ab0 <__retarget_lock_acquire_recursive>
 8001962:	bf00      	nop
 8001964:	200004ce 	.word	0x200004ce

08001968 <__sinit_lock_release>:
 8001968:	4801      	ldr	r0, [pc, #4]	; (8001970 <__sinit_lock_release+0x8>)
 800196a:	f000 b8a2 	b.w	8001ab2 <__retarget_lock_release_recursive>
 800196e:	bf00      	nop
 8001970:	200004ce 	.word	0x200004ce

08001974 <__sinit>:
 8001974:	b510      	push	{r4, lr}
 8001976:	4604      	mov	r4, r0
 8001978:	f7ff fff0 	bl	800195c <__sinit_lock_acquire>
 800197c:	69a3      	ldr	r3, [r4, #24]
 800197e:	b11b      	cbz	r3, 8001988 <__sinit+0x14>
 8001980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001984:	f7ff bff0 	b.w	8001968 <__sinit_lock_release>
 8001988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800198c:	6523      	str	r3, [r4, #80]	; 0x50
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <__sinit+0x68>)
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <__sinit+0x6c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	62a2      	str	r2, [r4, #40]	; 0x28
 8001996:	42a3      	cmp	r3, r4
 8001998:	bf04      	itt	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	61a3      	streq	r3, [r4, #24]
 800199e:	4620      	mov	r0, r4
 80019a0:	f000 f820 	bl	80019e4 <__sfp>
 80019a4:	6060      	str	r0, [r4, #4]
 80019a6:	4620      	mov	r0, r4
 80019a8:	f000 f81c 	bl	80019e4 <__sfp>
 80019ac:	60a0      	str	r0, [r4, #8]
 80019ae:	4620      	mov	r0, r4
 80019b0:	f000 f818 	bl	80019e4 <__sfp>
 80019b4:	2200      	movs	r2, #0
 80019b6:	60e0      	str	r0, [r4, #12]
 80019b8:	2104      	movs	r1, #4
 80019ba:	6860      	ldr	r0, [r4, #4]
 80019bc:	f7ff ff82 	bl	80018c4 <std>
 80019c0:	68a0      	ldr	r0, [r4, #8]
 80019c2:	2201      	movs	r2, #1
 80019c4:	2109      	movs	r1, #9
 80019c6:	f7ff ff7d 	bl	80018c4 <std>
 80019ca:	68e0      	ldr	r0, [r4, #12]
 80019cc:	2202      	movs	r2, #2
 80019ce:	2112      	movs	r1, #18
 80019d0:	f7ff ff78 	bl	80018c4 <std>
 80019d4:	2301      	movs	r3, #1
 80019d6:	61a3      	str	r3, [r4, #24]
 80019d8:	e7d2      	b.n	8001980 <__sinit+0xc>
 80019da:	bf00      	nop
 80019dc:	08002534 	.word	0x08002534
 80019e0:	0800190d 	.word	0x0800190d

080019e4 <__sfp>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	4607      	mov	r7, r0
 80019e8:	f7ff ffac 	bl	8001944 <__sfp_lock_acquire>
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <__sfp+0x84>)
 80019ee:	681e      	ldr	r6, [r3, #0]
 80019f0:	69b3      	ldr	r3, [r6, #24]
 80019f2:	b913      	cbnz	r3, 80019fa <__sfp+0x16>
 80019f4:	4630      	mov	r0, r6
 80019f6:	f7ff ffbd 	bl	8001974 <__sinit>
 80019fa:	3648      	adds	r6, #72	; 0x48
 80019fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	d503      	bpl.n	8001a0c <__sfp+0x28>
 8001a04:	6833      	ldr	r3, [r6, #0]
 8001a06:	b30b      	cbz	r3, 8001a4c <__sfp+0x68>
 8001a08:	6836      	ldr	r6, [r6, #0]
 8001a0a:	e7f7      	b.n	80019fc <__sfp+0x18>
 8001a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a10:	b9d5      	cbnz	r5, 8001a48 <__sfp+0x64>
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <__sfp+0x88>)
 8001a14:	60e3      	str	r3, [r4, #12]
 8001a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8001a1c:	f000 f847 	bl	8001aae <__retarget_lock_init_recursive>
 8001a20:	f7ff ff96 	bl	8001950 <__sfp_lock_release>
 8001a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a2c:	6025      	str	r5, [r4, #0]
 8001a2e:	61a5      	str	r5, [r4, #24]
 8001a30:	2208      	movs	r2, #8
 8001a32:	4629      	mov	r1, r5
 8001a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a38:	f7ff fd30 	bl	800149c <memset>
 8001a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a44:	4620      	mov	r0, r4
 8001a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a48:	3468      	adds	r4, #104	; 0x68
 8001a4a:	e7d9      	b.n	8001a00 <__sfp+0x1c>
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	4638      	mov	r0, r7
 8001a50:	f7ff ff62 	bl	8001918 <__sfmoreglue>
 8001a54:	4604      	mov	r4, r0
 8001a56:	6030      	str	r0, [r6, #0]
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d1d5      	bne.n	8001a08 <__sfp+0x24>
 8001a5c:	f7ff ff78 	bl	8001950 <__sfp_lock_release>
 8001a60:	230c      	movs	r3, #12
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	e7ee      	b.n	8001a44 <__sfp+0x60>
 8001a66:	bf00      	nop
 8001a68:	08002534 	.word	0x08002534
 8001a6c:	ffff0001 	.word	0xffff0001

08001a70 <_fwalk_reent>:
 8001a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a74:	4606      	mov	r6, r0
 8001a76:	4688      	mov	r8, r1
 8001a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a7c:	2700      	movs	r7, #0
 8001a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a82:	f1b9 0901 	subs.w	r9, r9, #1
 8001a86:	d505      	bpl.n	8001a94 <_fwalk_reent+0x24>
 8001a88:	6824      	ldr	r4, [r4, #0]
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	d1f7      	bne.n	8001a7e <_fwalk_reent+0xe>
 8001a8e:	4638      	mov	r0, r7
 8001a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a94:	89ab      	ldrh	r3, [r5, #12]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d907      	bls.n	8001aaa <_fwalk_reent+0x3a>
 8001a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	d003      	beq.n	8001aaa <_fwalk_reent+0x3a>
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	47c0      	blx	r8
 8001aa8:	4307      	orrs	r7, r0
 8001aaa:	3568      	adds	r5, #104	; 0x68
 8001aac:	e7e9      	b.n	8001a82 <_fwalk_reent+0x12>

08001aae <__retarget_lock_init_recursive>:
 8001aae:	4770      	bx	lr

08001ab0 <__retarget_lock_acquire_recursive>:
 8001ab0:	4770      	bx	lr

08001ab2 <__retarget_lock_release_recursive>:
 8001ab2:	4770      	bx	lr

08001ab4 <__swhatbuf_r>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	460e      	mov	r6, r1
 8001ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001abc:	2900      	cmp	r1, #0
 8001abe:	b096      	sub	sp, #88	; 0x58
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	da08      	bge.n	8001ad8 <__swhatbuf_r+0x24>
 8001ac6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	602a      	str	r2, [r5, #0]
 8001ace:	061a      	lsls	r2, r3, #24
 8001ad0:	d410      	bmi.n	8001af4 <__swhatbuf_r+0x40>
 8001ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad6:	e00e      	b.n	8001af6 <__swhatbuf_r+0x42>
 8001ad8:	466a      	mov	r2, sp
 8001ada:	f000 fc91 	bl	8002400 <_fstat_r>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	dbf1      	blt.n	8001ac6 <__swhatbuf_r+0x12>
 8001ae2:	9a01      	ldr	r2, [sp, #4]
 8001ae4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ae8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001aec:	425a      	negs	r2, r3
 8001aee:	415a      	adcs	r2, r3
 8001af0:	602a      	str	r2, [r5, #0]
 8001af2:	e7ee      	b.n	8001ad2 <__swhatbuf_r+0x1e>
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	2000      	movs	r0, #0
 8001af8:	6023      	str	r3, [r4, #0]
 8001afa:	b016      	add	sp, #88	; 0x58
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b00 <__smakebuf_r>:
 8001b00:	898b      	ldrh	r3, [r1, #12]
 8001b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b04:	079d      	lsls	r5, r3, #30
 8001b06:	4606      	mov	r6, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	d507      	bpl.n	8001b1c <__smakebuf_r+0x1c>
 8001b0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b10:	6023      	str	r3, [r4, #0]
 8001b12:	6123      	str	r3, [r4, #16]
 8001b14:	2301      	movs	r3, #1
 8001b16:	6163      	str	r3, [r4, #20]
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
 8001b1c:	ab01      	add	r3, sp, #4
 8001b1e:	466a      	mov	r2, sp
 8001b20:	f7ff ffc8 	bl	8001ab4 <__swhatbuf_r>
 8001b24:	9900      	ldr	r1, [sp, #0]
 8001b26:	4605      	mov	r5, r0
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f000 f893 	bl	8001c54 <_malloc_r>
 8001b2e:	b948      	cbnz	r0, 8001b44 <__smakebuf_r+0x44>
 8001b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b34:	059a      	lsls	r2, r3, #22
 8001b36:	d4ef      	bmi.n	8001b18 <__smakebuf_r+0x18>
 8001b38:	f023 0303 	bic.w	r3, r3, #3
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	81a3      	strh	r3, [r4, #12]
 8001b42:	e7e3      	b.n	8001b0c <__smakebuf_r+0xc>
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <__smakebuf_r+0x7c>)
 8001b46:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b48:	89a3      	ldrh	r3, [r4, #12]
 8001b4a:	6020      	str	r0, [r4, #0]
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	81a3      	strh	r3, [r4, #12]
 8001b52:	9b00      	ldr	r3, [sp, #0]
 8001b54:	6163      	str	r3, [r4, #20]
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	6120      	str	r0, [r4, #16]
 8001b5a:	b15b      	cbz	r3, 8001b74 <__smakebuf_r+0x74>
 8001b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b60:	4630      	mov	r0, r6
 8001b62:	f000 fc5f 	bl	8002424 <_isatty_r>
 8001b66:	b128      	cbz	r0, 8001b74 <__smakebuf_r+0x74>
 8001b68:	89a3      	ldrh	r3, [r4, #12]
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	81a3      	strh	r3, [r4, #12]
 8001b74:	89a0      	ldrh	r0, [r4, #12]
 8001b76:	4305      	orrs	r5, r0
 8001b78:	81a5      	strh	r5, [r4, #12]
 8001b7a:	e7cd      	b.n	8001b18 <__smakebuf_r+0x18>
 8001b7c:	0800190d 	.word	0x0800190d

08001b80 <_free_r>:
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4605      	mov	r5, r0
 8001b84:	2900      	cmp	r1, #0
 8001b86:	d041      	beq.n	8001c0c <_free_r+0x8c>
 8001b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b8c:	1f0c      	subs	r4, r1, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bfb8      	it	lt
 8001b92:	18e4      	addlt	r4, r4, r3
 8001b94:	f000 fc68 	bl	8002468 <__malloc_lock>
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <_free_r+0x90>)
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	b933      	cbnz	r3, 8001bac <_free_r+0x2c>
 8001b9e:	6063      	str	r3, [r4, #4]
 8001ba0:	6014      	str	r4, [r2, #0]
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ba8:	f000 bc64 	b.w	8002474 <__malloc_unlock>
 8001bac:	42a3      	cmp	r3, r4
 8001bae:	d908      	bls.n	8001bc2 <_free_r+0x42>
 8001bb0:	6820      	ldr	r0, [r4, #0]
 8001bb2:	1821      	adds	r1, r4, r0
 8001bb4:	428b      	cmp	r3, r1
 8001bb6:	bf01      	itttt	eq
 8001bb8:	6819      	ldreq	r1, [r3, #0]
 8001bba:	685b      	ldreq	r3, [r3, #4]
 8001bbc:	1809      	addeq	r1, r1, r0
 8001bbe:	6021      	streq	r1, [r4, #0]
 8001bc0:	e7ed      	b.n	8001b9e <_free_r+0x1e>
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	b10b      	cbz	r3, 8001bcc <_free_r+0x4c>
 8001bc8:	42a3      	cmp	r3, r4
 8001bca:	d9fa      	bls.n	8001bc2 <_free_r+0x42>
 8001bcc:	6811      	ldr	r1, [r2, #0]
 8001bce:	1850      	adds	r0, r2, r1
 8001bd0:	42a0      	cmp	r0, r4
 8001bd2:	d10b      	bne.n	8001bec <_free_r+0x6c>
 8001bd4:	6820      	ldr	r0, [r4, #0]
 8001bd6:	4401      	add	r1, r0
 8001bd8:	1850      	adds	r0, r2, r1
 8001bda:	4283      	cmp	r3, r0
 8001bdc:	6011      	str	r1, [r2, #0]
 8001bde:	d1e0      	bne.n	8001ba2 <_free_r+0x22>
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	6053      	str	r3, [r2, #4]
 8001be6:	4401      	add	r1, r0
 8001be8:	6011      	str	r1, [r2, #0]
 8001bea:	e7da      	b.n	8001ba2 <_free_r+0x22>
 8001bec:	d902      	bls.n	8001bf4 <_free_r+0x74>
 8001bee:	230c      	movs	r3, #12
 8001bf0:	602b      	str	r3, [r5, #0]
 8001bf2:	e7d6      	b.n	8001ba2 <_free_r+0x22>
 8001bf4:	6820      	ldr	r0, [r4, #0]
 8001bf6:	1821      	adds	r1, r4, r0
 8001bf8:	428b      	cmp	r3, r1
 8001bfa:	bf04      	itt	eq
 8001bfc:	6819      	ldreq	r1, [r3, #0]
 8001bfe:	685b      	ldreq	r3, [r3, #4]
 8001c00:	6063      	str	r3, [r4, #4]
 8001c02:	bf04      	itt	eq
 8001c04:	1809      	addeq	r1, r1, r0
 8001c06:	6021      	streq	r1, [r4, #0]
 8001c08:	6054      	str	r4, [r2, #4]
 8001c0a:	e7ca      	b.n	8001ba2 <_free_r+0x22>
 8001c0c:	bd38      	pop	{r3, r4, r5, pc}
 8001c0e:	bf00      	nop
 8001c10:	200004d0 	.word	0x200004d0

08001c14 <sbrk_aligned>:
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	4e0e      	ldr	r6, [pc, #56]	; (8001c50 <sbrk_aligned+0x3c>)
 8001c18:	460c      	mov	r4, r1
 8001c1a:	6831      	ldr	r1, [r6, #0]
 8001c1c:	4605      	mov	r5, r0
 8001c1e:	b911      	cbnz	r1, 8001c26 <sbrk_aligned+0x12>
 8001c20:	f000 fb78 	bl	8002314 <_sbrk_r>
 8001c24:	6030      	str	r0, [r6, #0]
 8001c26:	4621      	mov	r1, r4
 8001c28:	4628      	mov	r0, r5
 8001c2a:	f000 fb73 	bl	8002314 <_sbrk_r>
 8001c2e:	1c43      	adds	r3, r0, #1
 8001c30:	d00a      	beq.n	8001c48 <sbrk_aligned+0x34>
 8001c32:	1cc4      	adds	r4, r0, #3
 8001c34:	f024 0403 	bic.w	r4, r4, #3
 8001c38:	42a0      	cmp	r0, r4
 8001c3a:	d007      	beq.n	8001c4c <sbrk_aligned+0x38>
 8001c3c:	1a21      	subs	r1, r4, r0
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f000 fb68 	bl	8002314 <_sbrk_r>
 8001c44:	3001      	adds	r0, #1
 8001c46:	d101      	bne.n	8001c4c <sbrk_aligned+0x38>
 8001c48:	f04f 34ff 	mov.w	r4, #4294967295
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	200004d4 	.word	0x200004d4

08001c54 <_malloc_r>:
 8001c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c58:	1ccd      	adds	r5, r1, #3
 8001c5a:	f025 0503 	bic.w	r5, r5, #3
 8001c5e:	3508      	adds	r5, #8
 8001c60:	2d0c      	cmp	r5, #12
 8001c62:	bf38      	it	cc
 8001c64:	250c      	movcc	r5, #12
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	4607      	mov	r7, r0
 8001c6a:	db01      	blt.n	8001c70 <_malloc_r+0x1c>
 8001c6c:	42a9      	cmp	r1, r5
 8001c6e:	d905      	bls.n	8001c7c <_malloc_r+0x28>
 8001c70:	230c      	movs	r3, #12
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	2600      	movs	r6, #0
 8001c76:	4630      	mov	r0, r6
 8001c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c7c:	4e2e      	ldr	r6, [pc, #184]	; (8001d38 <_malloc_r+0xe4>)
 8001c7e:	f000 fbf3 	bl	8002468 <__malloc_lock>
 8001c82:	6833      	ldr	r3, [r6, #0]
 8001c84:	461c      	mov	r4, r3
 8001c86:	bb34      	cbnz	r4, 8001cd6 <_malloc_r+0x82>
 8001c88:	4629      	mov	r1, r5
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	f7ff ffc2 	bl	8001c14 <sbrk_aligned>
 8001c90:	1c43      	adds	r3, r0, #1
 8001c92:	4604      	mov	r4, r0
 8001c94:	d14d      	bne.n	8001d32 <_malloc_r+0xde>
 8001c96:	6834      	ldr	r4, [r6, #0]
 8001c98:	4626      	mov	r6, r4
 8001c9a:	2e00      	cmp	r6, #0
 8001c9c:	d140      	bne.n	8001d20 <_malloc_r+0xcc>
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	4631      	mov	r1, r6
 8001ca2:	4638      	mov	r0, r7
 8001ca4:	eb04 0803 	add.w	r8, r4, r3
 8001ca8:	f000 fb34 	bl	8002314 <_sbrk_r>
 8001cac:	4580      	cmp	r8, r0
 8001cae:	d13a      	bne.n	8001d26 <_malloc_r+0xd2>
 8001cb0:	6821      	ldr	r1, [r4, #0]
 8001cb2:	3503      	adds	r5, #3
 8001cb4:	1a6d      	subs	r5, r5, r1
 8001cb6:	f025 0503 	bic.w	r5, r5, #3
 8001cba:	3508      	adds	r5, #8
 8001cbc:	2d0c      	cmp	r5, #12
 8001cbe:	bf38      	it	cc
 8001cc0:	250c      	movcc	r5, #12
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	4638      	mov	r0, r7
 8001cc6:	f7ff ffa5 	bl	8001c14 <sbrk_aligned>
 8001cca:	3001      	adds	r0, #1
 8001ccc:	d02b      	beq.n	8001d26 <_malloc_r+0xd2>
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	442b      	add	r3, r5
 8001cd2:	6023      	str	r3, [r4, #0]
 8001cd4:	e00e      	b.n	8001cf4 <_malloc_r+0xa0>
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	1b52      	subs	r2, r2, r5
 8001cda:	d41e      	bmi.n	8001d1a <_malloc_r+0xc6>
 8001cdc:	2a0b      	cmp	r2, #11
 8001cde:	d916      	bls.n	8001d0e <_malloc_r+0xba>
 8001ce0:	1961      	adds	r1, r4, r5
 8001ce2:	42a3      	cmp	r3, r4
 8001ce4:	6025      	str	r5, [r4, #0]
 8001ce6:	bf18      	it	ne
 8001ce8:	6059      	strne	r1, [r3, #4]
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	bf08      	it	eq
 8001cee:	6031      	streq	r1, [r6, #0]
 8001cf0:	5162      	str	r2, [r4, r5]
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	f104 060b 	add.w	r6, r4, #11
 8001cfa:	f000 fbbb 	bl	8002474 <__malloc_unlock>
 8001cfe:	f026 0607 	bic.w	r6, r6, #7
 8001d02:	1d23      	adds	r3, r4, #4
 8001d04:	1af2      	subs	r2, r6, r3
 8001d06:	d0b6      	beq.n	8001c76 <_malloc_r+0x22>
 8001d08:	1b9b      	subs	r3, r3, r6
 8001d0a:	50a3      	str	r3, [r4, r2]
 8001d0c:	e7b3      	b.n	8001c76 <_malloc_r+0x22>
 8001d0e:	6862      	ldr	r2, [r4, #4]
 8001d10:	42a3      	cmp	r3, r4
 8001d12:	bf0c      	ite	eq
 8001d14:	6032      	streq	r2, [r6, #0]
 8001d16:	605a      	strne	r2, [r3, #4]
 8001d18:	e7ec      	b.n	8001cf4 <_malloc_r+0xa0>
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	6864      	ldr	r4, [r4, #4]
 8001d1e:	e7b2      	b.n	8001c86 <_malloc_r+0x32>
 8001d20:	4634      	mov	r4, r6
 8001d22:	6876      	ldr	r6, [r6, #4]
 8001d24:	e7b9      	b.n	8001c9a <_malloc_r+0x46>
 8001d26:	230c      	movs	r3, #12
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	f000 fba2 	bl	8002474 <__malloc_unlock>
 8001d30:	e7a1      	b.n	8001c76 <_malloc_r+0x22>
 8001d32:	6025      	str	r5, [r4, #0]
 8001d34:	e7de      	b.n	8001cf4 <_malloc_r+0xa0>
 8001d36:	bf00      	nop
 8001d38:	200004d0 	.word	0x200004d0

08001d3c <__sfputc_r>:
 8001d3c:	6893      	ldr	r3, [r2, #8]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	b410      	push	{r4}
 8001d44:	6093      	str	r3, [r2, #8]
 8001d46:	da07      	bge.n	8001d58 <__sfputc_r+0x1c>
 8001d48:	6994      	ldr	r4, [r2, #24]
 8001d4a:	42a3      	cmp	r3, r4
 8001d4c:	db01      	blt.n	8001d52 <__sfputc_r+0x16>
 8001d4e:	290a      	cmp	r1, #10
 8001d50:	d102      	bne.n	8001d58 <__sfputc_r+0x1c>
 8001d52:	bc10      	pop	{r4}
 8001d54:	f7ff bc38 	b.w	80015c8 <__swbuf_r>
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	1c58      	adds	r0, r3, #1
 8001d5c:	6010      	str	r0, [r2, #0]
 8001d5e:	7019      	strb	r1, [r3, #0]
 8001d60:	4608      	mov	r0, r1
 8001d62:	bc10      	pop	{r4}
 8001d64:	4770      	bx	lr

08001d66 <__sfputs_r>:
 8001d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d68:	4606      	mov	r6, r0
 8001d6a:	460f      	mov	r7, r1
 8001d6c:	4614      	mov	r4, r2
 8001d6e:	18d5      	adds	r5, r2, r3
 8001d70:	42ac      	cmp	r4, r5
 8001d72:	d101      	bne.n	8001d78 <__sfputs_r+0x12>
 8001d74:	2000      	movs	r0, #0
 8001d76:	e007      	b.n	8001d88 <__sfputs_r+0x22>
 8001d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d7c:	463a      	mov	r2, r7
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f7ff ffdc 	bl	8001d3c <__sfputc_r>
 8001d84:	1c43      	adds	r3, r0, #1
 8001d86:	d1f3      	bne.n	8001d70 <__sfputs_r+0xa>
 8001d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d8c <_vfiprintf_r>:
 8001d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d90:	460d      	mov	r5, r1
 8001d92:	b09d      	sub	sp, #116	; 0x74
 8001d94:	4614      	mov	r4, r2
 8001d96:	4698      	mov	r8, r3
 8001d98:	4606      	mov	r6, r0
 8001d9a:	b118      	cbz	r0, 8001da4 <_vfiprintf_r+0x18>
 8001d9c:	6983      	ldr	r3, [r0, #24]
 8001d9e:	b90b      	cbnz	r3, 8001da4 <_vfiprintf_r+0x18>
 8001da0:	f7ff fde8 	bl	8001974 <__sinit>
 8001da4:	4b89      	ldr	r3, [pc, #548]	; (8001fcc <_vfiprintf_r+0x240>)
 8001da6:	429d      	cmp	r5, r3
 8001da8:	d11b      	bne.n	8001de2 <_vfiprintf_r+0x56>
 8001daa:	6875      	ldr	r5, [r6, #4]
 8001dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dae:	07d9      	lsls	r1, r3, #31
 8001db0:	d405      	bmi.n	8001dbe <_vfiprintf_r+0x32>
 8001db2:	89ab      	ldrh	r3, [r5, #12]
 8001db4:	059a      	lsls	r2, r3, #22
 8001db6:	d402      	bmi.n	8001dbe <_vfiprintf_r+0x32>
 8001db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001dba:	f7ff fe79 	bl	8001ab0 <__retarget_lock_acquire_recursive>
 8001dbe:	89ab      	ldrh	r3, [r5, #12]
 8001dc0:	071b      	lsls	r3, r3, #28
 8001dc2:	d501      	bpl.n	8001dc8 <_vfiprintf_r+0x3c>
 8001dc4:	692b      	ldr	r3, [r5, #16]
 8001dc6:	b9eb      	cbnz	r3, 8001e04 <_vfiprintf_r+0x78>
 8001dc8:	4629      	mov	r1, r5
 8001dca:	4630      	mov	r0, r6
 8001dcc:	f7ff fc4e 	bl	800166c <__swsetup_r>
 8001dd0:	b1c0      	cbz	r0, 8001e04 <_vfiprintf_r+0x78>
 8001dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dd4:	07dc      	lsls	r4, r3, #31
 8001dd6:	d50e      	bpl.n	8001df6 <_vfiprintf_r+0x6a>
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	b01d      	add	sp, #116	; 0x74
 8001dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001de2:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <_vfiprintf_r+0x244>)
 8001de4:	429d      	cmp	r5, r3
 8001de6:	d101      	bne.n	8001dec <_vfiprintf_r+0x60>
 8001de8:	68b5      	ldr	r5, [r6, #8]
 8001dea:	e7df      	b.n	8001dac <_vfiprintf_r+0x20>
 8001dec:	4b79      	ldr	r3, [pc, #484]	; (8001fd4 <_vfiprintf_r+0x248>)
 8001dee:	429d      	cmp	r5, r3
 8001df0:	bf08      	it	eq
 8001df2:	68f5      	ldreq	r5, [r6, #12]
 8001df4:	e7da      	b.n	8001dac <_vfiprintf_r+0x20>
 8001df6:	89ab      	ldrh	r3, [r5, #12]
 8001df8:	0598      	lsls	r0, r3, #22
 8001dfa:	d4ed      	bmi.n	8001dd8 <_vfiprintf_r+0x4c>
 8001dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001dfe:	f7ff fe58 	bl	8001ab2 <__retarget_lock_release_recursive>
 8001e02:	e7e9      	b.n	8001dd8 <_vfiprintf_r+0x4c>
 8001e04:	2300      	movs	r3, #0
 8001e06:	9309      	str	r3, [sp, #36]	; 0x24
 8001e08:	2320      	movs	r3, #32
 8001e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e12:	2330      	movs	r3, #48	; 0x30
 8001e14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001fd8 <_vfiprintf_r+0x24c>
 8001e18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e1c:	f04f 0901 	mov.w	r9, #1
 8001e20:	4623      	mov	r3, r4
 8001e22:	469a      	mov	sl, r3
 8001e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e28:	b10a      	cbz	r2, 8001e2e <_vfiprintf_r+0xa2>
 8001e2a:	2a25      	cmp	r2, #37	; 0x25
 8001e2c:	d1f9      	bne.n	8001e22 <_vfiprintf_r+0x96>
 8001e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8001e32:	d00b      	beq.n	8001e4c <_vfiprintf_r+0xc0>
 8001e34:	465b      	mov	r3, fp
 8001e36:	4622      	mov	r2, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	f7ff ff93 	bl	8001d66 <__sfputs_r>
 8001e40:	3001      	adds	r0, #1
 8001e42:	f000 80aa 	beq.w	8001f9a <_vfiprintf_r+0x20e>
 8001e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e48:	445a      	add	r2, fp
 8001e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8001e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80a2 	beq.w	8001f9a <_vfiprintf_r+0x20e>
 8001e56:	2300      	movs	r3, #0
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e60:	f10a 0a01 	add.w	sl, sl, #1
 8001e64:	9304      	str	r3, [sp, #16]
 8001e66:	9307      	str	r3, [sp, #28]
 8001e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8001e6e:	4654      	mov	r4, sl
 8001e70:	2205      	movs	r2, #5
 8001e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e76:	4858      	ldr	r0, [pc, #352]	; (8001fd8 <_vfiprintf_r+0x24c>)
 8001e78:	f7fe f9c2 	bl	8000200 <memchr>
 8001e7c:	9a04      	ldr	r2, [sp, #16]
 8001e7e:	b9d8      	cbnz	r0, 8001eb8 <_vfiprintf_r+0x12c>
 8001e80:	06d1      	lsls	r1, r2, #27
 8001e82:	bf44      	itt	mi
 8001e84:	2320      	movmi	r3, #32
 8001e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e8a:	0713      	lsls	r3, r2, #28
 8001e8c:	bf44      	itt	mi
 8001e8e:	232b      	movmi	r3, #43	; 0x2b
 8001e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e94:	f89a 3000 	ldrb.w	r3, [sl]
 8001e98:	2b2a      	cmp	r3, #42	; 0x2a
 8001e9a:	d015      	beq.n	8001ec8 <_vfiprintf_r+0x13c>
 8001e9c:	9a07      	ldr	r2, [sp, #28]
 8001e9e:	4654      	mov	r4, sl
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f04f 0c0a 	mov.w	ip, #10
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001eac:	3b30      	subs	r3, #48	; 0x30
 8001eae:	2b09      	cmp	r3, #9
 8001eb0:	d94e      	bls.n	8001f50 <_vfiprintf_r+0x1c4>
 8001eb2:	b1b0      	cbz	r0, 8001ee2 <_vfiprintf_r+0x156>
 8001eb4:	9207      	str	r2, [sp, #28]
 8001eb6:	e014      	b.n	8001ee2 <_vfiprintf_r+0x156>
 8001eb8:	eba0 0308 	sub.w	r3, r0, r8
 8001ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	9304      	str	r3, [sp, #16]
 8001ec4:	46a2      	mov	sl, r4
 8001ec6:	e7d2      	b.n	8001e6e <_vfiprintf_r+0xe2>
 8001ec8:	9b03      	ldr	r3, [sp, #12]
 8001eca:	1d19      	adds	r1, r3, #4
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	9103      	str	r1, [sp, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bfbb      	ittet	lt
 8001ed4:	425b      	neglt	r3, r3
 8001ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8001eda:	9307      	strge	r3, [sp, #28]
 8001edc:	9307      	strlt	r3, [sp, #28]
 8001ede:	bfb8      	it	lt
 8001ee0:	9204      	strlt	r2, [sp, #16]
 8001ee2:	7823      	ldrb	r3, [r4, #0]
 8001ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ee6:	d10c      	bne.n	8001f02 <_vfiprintf_r+0x176>
 8001ee8:	7863      	ldrb	r3, [r4, #1]
 8001eea:	2b2a      	cmp	r3, #42	; 0x2a
 8001eec:	d135      	bne.n	8001f5a <_vfiprintf_r+0x1ce>
 8001eee:	9b03      	ldr	r3, [sp, #12]
 8001ef0:	1d1a      	adds	r2, r3, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	9203      	str	r2, [sp, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bfb8      	it	lt
 8001efa:	f04f 33ff 	movlt.w	r3, #4294967295
 8001efe:	3402      	adds	r4, #2
 8001f00:	9305      	str	r3, [sp, #20]
 8001f02:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001fdc <_vfiprintf_r+0x250>
 8001f06:	7821      	ldrb	r1, [r4, #0]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4650      	mov	r0, sl
 8001f0c:	f7fe f978 	bl	8000200 <memchr>
 8001f10:	b140      	cbz	r0, 8001f24 <_vfiprintf_r+0x198>
 8001f12:	2340      	movs	r3, #64	; 0x40
 8001f14:	eba0 000a 	sub.w	r0, r0, sl
 8001f18:	fa03 f000 	lsl.w	r0, r3, r0
 8001f1c:	9b04      	ldr	r3, [sp, #16]
 8001f1e:	4303      	orrs	r3, r0
 8001f20:	3401      	adds	r4, #1
 8001f22:	9304      	str	r3, [sp, #16]
 8001f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f28:	482d      	ldr	r0, [pc, #180]	; (8001fe0 <_vfiprintf_r+0x254>)
 8001f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f2e:	2206      	movs	r2, #6
 8001f30:	f7fe f966 	bl	8000200 <memchr>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d03f      	beq.n	8001fb8 <_vfiprintf_r+0x22c>
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <_vfiprintf_r+0x258>)
 8001f3a:	bb1b      	cbnz	r3, 8001f84 <_vfiprintf_r+0x1f8>
 8001f3c:	9b03      	ldr	r3, [sp, #12]
 8001f3e:	3307      	adds	r3, #7
 8001f40:	f023 0307 	bic.w	r3, r3, #7
 8001f44:	3308      	adds	r3, #8
 8001f46:	9303      	str	r3, [sp, #12]
 8001f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f4a:	443b      	add	r3, r7
 8001f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f4e:	e767      	b.n	8001e20 <_vfiprintf_r+0x94>
 8001f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f54:	460c      	mov	r4, r1
 8001f56:	2001      	movs	r0, #1
 8001f58:	e7a5      	b.n	8001ea6 <_vfiprintf_r+0x11a>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	3401      	adds	r4, #1
 8001f5e:	9305      	str	r3, [sp, #20]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f04f 0c0a 	mov.w	ip, #10
 8001f66:	4620      	mov	r0, r4
 8001f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f6c:	3a30      	subs	r2, #48	; 0x30
 8001f6e:	2a09      	cmp	r2, #9
 8001f70:	d903      	bls.n	8001f7a <_vfiprintf_r+0x1ee>
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0c5      	beq.n	8001f02 <_vfiprintf_r+0x176>
 8001f76:	9105      	str	r1, [sp, #20]
 8001f78:	e7c3      	b.n	8001f02 <_vfiprintf_r+0x176>
 8001f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f7e:	4604      	mov	r4, r0
 8001f80:	2301      	movs	r3, #1
 8001f82:	e7f0      	b.n	8001f66 <_vfiprintf_r+0x1da>
 8001f84:	ab03      	add	r3, sp, #12
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	462a      	mov	r2, r5
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <_vfiprintf_r+0x25c>)
 8001f8c:	a904      	add	r1, sp, #16
 8001f8e:	4630      	mov	r0, r6
 8001f90:	f3af 8000 	nop.w
 8001f94:	4607      	mov	r7, r0
 8001f96:	1c78      	adds	r0, r7, #1
 8001f98:	d1d6      	bne.n	8001f48 <_vfiprintf_r+0x1bc>
 8001f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f9c:	07d9      	lsls	r1, r3, #31
 8001f9e:	d405      	bmi.n	8001fac <_vfiprintf_r+0x220>
 8001fa0:	89ab      	ldrh	r3, [r5, #12]
 8001fa2:	059a      	lsls	r2, r3, #22
 8001fa4:	d402      	bmi.n	8001fac <_vfiprintf_r+0x220>
 8001fa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fa8:	f7ff fd83 	bl	8001ab2 <__retarget_lock_release_recursive>
 8001fac:	89ab      	ldrh	r3, [r5, #12]
 8001fae:	065b      	lsls	r3, r3, #25
 8001fb0:	f53f af12 	bmi.w	8001dd8 <_vfiprintf_r+0x4c>
 8001fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fb6:	e711      	b.n	8001ddc <_vfiprintf_r+0x50>
 8001fb8:	ab03      	add	r3, sp, #12
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	462a      	mov	r2, r5
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <_vfiprintf_r+0x25c>)
 8001fc0:	a904      	add	r1, sp, #16
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	f000 f880 	bl	80020c8 <_printf_i>
 8001fc8:	e7e4      	b.n	8001f94 <_vfiprintf_r+0x208>
 8001fca:	bf00      	nop
 8001fcc:	08002558 	.word	0x08002558
 8001fd0:	08002578 	.word	0x08002578
 8001fd4:	08002538 	.word	0x08002538
 8001fd8:	08002598 	.word	0x08002598
 8001fdc:	0800259e 	.word	0x0800259e
 8001fe0:	080025a2 	.word	0x080025a2
 8001fe4:	00000000 	.word	0x00000000
 8001fe8:	08001d67 	.word	0x08001d67

08001fec <_printf_common>:
 8001fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff0:	4616      	mov	r6, r2
 8001ff2:	4699      	mov	r9, r3
 8001ff4:	688a      	ldr	r2, [r1, #8]
 8001ff6:	690b      	ldr	r3, [r1, #16]
 8001ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	bfb8      	it	lt
 8002000:	4613      	movlt	r3, r2
 8002002:	6033      	str	r3, [r6, #0]
 8002004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002008:	4607      	mov	r7, r0
 800200a:	460c      	mov	r4, r1
 800200c:	b10a      	cbz	r2, 8002012 <_printf_common+0x26>
 800200e:	3301      	adds	r3, #1
 8002010:	6033      	str	r3, [r6, #0]
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	0699      	lsls	r1, r3, #26
 8002016:	bf42      	ittt	mi
 8002018:	6833      	ldrmi	r3, [r6, #0]
 800201a:	3302      	addmi	r3, #2
 800201c:	6033      	strmi	r3, [r6, #0]
 800201e:	6825      	ldr	r5, [r4, #0]
 8002020:	f015 0506 	ands.w	r5, r5, #6
 8002024:	d106      	bne.n	8002034 <_printf_common+0x48>
 8002026:	f104 0a19 	add.w	sl, r4, #25
 800202a:	68e3      	ldr	r3, [r4, #12]
 800202c:	6832      	ldr	r2, [r6, #0]
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	42ab      	cmp	r3, r5
 8002032:	dc26      	bgt.n	8002082 <_printf_common+0x96>
 8002034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002038:	1e13      	subs	r3, r2, #0
 800203a:	6822      	ldr	r2, [r4, #0]
 800203c:	bf18      	it	ne
 800203e:	2301      	movne	r3, #1
 8002040:	0692      	lsls	r2, r2, #26
 8002042:	d42b      	bmi.n	800209c <_printf_common+0xb0>
 8002044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002048:	4649      	mov	r1, r9
 800204a:	4638      	mov	r0, r7
 800204c:	47c0      	blx	r8
 800204e:	3001      	adds	r0, #1
 8002050:	d01e      	beq.n	8002090 <_printf_common+0xa4>
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	68e5      	ldr	r5, [r4, #12]
 8002056:	6832      	ldr	r2, [r6, #0]
 8002058:	f003 0306 	and.w	r3, r3, #6
 800205c:	2b04      	cmp	r3, #4
 800205e:	bf08      	it	eq
 8002060:	1aad      	subeq	r5, r5, r2
 8002062:	68a3      	ldr	r3, [r4, #8]
 8002064:	6922      	ldr	r2, [r4, #16]
 8002066:	bf0c      	ite	eq
 8002068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800206c:	2500      	movne	r5, #0
 800206e:	4293      	cmp	r3, r2
 8002070:	bfc4      	itt	gt
 8002072:	1a9b      	subgt	r3, r3, r2
 8002074:	18ed      	addgt	r5, r5, r3
 8002076:	2600      	movs	r6, #0
 8002078:	341a      	adds	r4, #26
 800207a:	42b5      	cmp	r5, r6
 800207c:	d11a      	bne.n	80020b4 <_printf_common+0xc8>
 800207e:	2000      	movs	r0, #0
 8002080:	e008      	b.n	8002094 <_printf_common+0xa8>
 8002082:	2301      	movs	r3, #1
 8002084:	4652      	mov	r2, sl
 8002086:	4649      	mov	r1, r9
 8002088:	4638      	mov	r0, r7
 800208a:	47c0      	blx	r8
 800208c:	3001      	adds	r0, #1
 800208e:	d103      	bne.n	8002098 <_printf_common+0xac>
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002098:	3501      	adds	r5, #1
 800209a:	e7c6      	b.n	800202a <_printf_common+0x3e>
 800209c:	18e1      	adds	r1, r4, r3
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	2030      	movs	r0, #48	; 0x30
 80020a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020a6:	4422      	add	r2, r4
 80020a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020b0:	3302      	adds	r3, #2
 80020b2:	e7c7      	b.n	8002044 <_printf_common+0x58>
 80020b4:	2301      	movs	r3, #1
 80020b6:	4622      	mov	r2, r4
 80020b8:	4649      	mov	r1, r9
 80020ba:	4638      	mov	r0, r7
 80020bc:	47c0      	blx	r8
 80020be:	3001      	adds	r0, #1
 80020c0:	d0e6      	beq.n	8002090 <_printf_common+0xa4>
 80020c2:	3601      	adds	r6, #1
 80020c4:	e7d9      	b.n	800207a <_printf_common+0x8e>
	...

080020c8 <_printf_i>:
 80020c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020cc:	7e0f      	ldrb	r7, [r1, #24]
 80020ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80020d0:	2f78      	cmp	r7, #120	; 0x78
 80020d2:	4691      	mov	r9, r2
 80020d4:	4680      	mov	r8, r0
 80020d6:	460c      	mov	r4, r1
 80020d8:	469a      	mov	sl, r3
 80020da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80020de:	d807      	bhi.n	80020f0 <_printf_i+0x28>
 80020e0:	2f62      	cmp	r7, #98	; 0x62
 80020e2:	d80a      	bhi.n	80020fa <_printf_i+0x32>
 80020e4:	2f00      	cmp	r7, #0
 80020e6:	f000 80d8 	beq.w	800229a <_printf_i+0x1d2>
 80020ea:	2f58      	cmp	r7, #88	; 0x58
 80020ec:	f000 80a3 	beq.w	8002236 <_printf_i+0x16e>
 80020f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80020f8:	e03a      	b.n	8002170 <_printf_i+0xa8>
 80020fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80020fe:	2b15      	cmp	r3, #21
 8002100:	d8f6      	bhi.n	80020f0 <_printf_i+0x28>
 8002102:	a101      	add	r1, pc, #4	; (adr r1, 8002108 <_printf_i+0x40>)
 8002104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002108:	08002161 	.word	0x08002161
 800210c:	08002175 	.word	0x08002175
 8002110:	080020f1 	.word	0x080020f1
 8002114:	080020f1 	.word	0x080020f1
 8002118:	080020f1 	.word	0x080020f1
 800211c:	080020f1 	.word	0x080020f1
 8002120:	08002175 	.word	0x08002175
 8002124:	080020f1 	.word	0x080020f1
 8002128:	080020f1 	.word	0x080020f1
 800212c:	080020f1 	.word	0x080020f1
 8002130:	080020f1 	.word	0x080020f1
 8002134:	08002281 	.word	0x08002281
 8002138:	080021a5 	.word	0x080021a5
 800213c:	08002263 	.word	0x08002263
 8002140:	080020f1 	.word	0x080020f1
 8002144:	080020f1 	.word	0x080020f1
 8002148:	080022a3 	.word	0x080022a3
 800214c:	080020f1 	.word	0x080020f1
 8002150:	080021a5 	.word	0x080021a5
 8002154:	080020f1 	.word	0x080020f1
 8002158:	080020f1 	.word	0x080020f1
 800215c:	0800226b 	.word	0x0800226b
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	1d1a      	adds	r2, r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	602a      	str	r2, [r5, #0]
 8002168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800216c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002170:	2301      	movs	r3, #1
 8002172:	e0a3      	b.n	80022bc <_printf_i+0x1f4>
 8002174:	6820      	ldr	r0, [r4, #0]
 8002176:	6829      	ldr	r1, [r5, #0]
 8002178:	0606      	lsls	r6, r0, #24
 800217a:	f101 0304 	add.w	r3, r1, #4
 800217e:	d50a      	bpl.n	8002196 <_printf_i+0xce>
 8002180:	680e      	ldr	r6, [r1, #0]
 8002182:	602b      	str	r3, [r5, #0]
 8002184:	2e00      	cmp	r6, #0
 8002186:	da03      	bge.n	8002190 <_printf_i+0xc8>
 8002188:	232d      	movs	r3, #45	; 0x2d
 800218a:	4276      	negs	r6, r6
 800218c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002190:	485e      	ldr	r0, [pc, #376]	; (800230c <_printf_i+0x244>)
 8002192:	230a      	movs	r3, #10
 8002194:	e019      	b.n	80021ca <_printf_i+0x102>
 8002196:	680e      	ldr	r6, [r1, #0]
 8002198:	602b      	str	r3, [r5, #0]
 800219a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800219e:	bf18      	it	ne
 80021a0:	b236      	sxthne	r6, r6
 80021a2:	e7ef      	b.n	8002184 <_printf_i+0xbc>
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	6820      	ldr	r0, [r4, #0]
 80021a8:	1d19      	adds	r1, r3, #4
 80021aa:	6029      	str	r1, [r5, #0]
 80021ac:	0601      	lsls	r1, r0, #24
 80021ae:	d501      	bpl.n	80021b4 <_printf_i+0xec>
 80021b0:	681e      	ldr	r6, [r3, #0]
 80021b2:	e002      	b.n	80021ba <_printf_i+0xf2>
 80021b4:	0646      	lsls	r6, r0, #25
 80021b6:	d5fb      	bpl.n	80021b0 <_printf_i+0xe8>
 80021b8:	881e      	ldrh	r6, [r3, #0]
 80021ba:	4854      	ldr	r0, [pc, #336]	; (800230c <_printf_i+0x244>)
 80021bc:	2f6f      	cmp	r7, #111	; 0x6f
 80021be:	bf0c      	ite	eq
 80021c0:	2308      	moveq	r3, #8
 80021c2:	230a      	movne	r3, #10
 80021c4:	2100      	movs	r1, #0
 80021c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021ca:	6865      	ldr	r5, [r4, #4]
 80021cc:	60a5      	str	r5, [r4, #8]
 80021ce:	2d00      	cmp	r5, #0
 80021d0:	bfa2      	ittt	ge
 80021d2:	6821      	ldrge	r1, [r4, #0]
 80021d4:	f021 0104 	bicge.w	r1, r1, #4
 80021d8:	6021      	strge	r1, [r4, #0]
 80021da:	b90e      	cbnz	r6, 80021e0 <_printf_i+0x118>
 80021dc:	2d00      	cmp	r5, #0
 80021de:	d04d      	beq.n	800227c <_printf_i+0x1b4>
 80021e0:	4615      	mov	r5, r2
 80021e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80021e6:	fb03 6711 	mls	r7, r3, r1, r6
 80021ea:	5dc7      	ldrb	r7, [r0, r7]
 80021ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80021f0:	4637      	mov	r7, r6
 80021f2:	42bb      	cmp	r3, r7
 80021f4:	460e      	mov	r6, r1
 80021f6:	d9f4      	bls.n	80021e2 <_printf_i+0x11a>
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d10b      	bne.n	8002214 <_printf_i+0x14c>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	07de      	lsls	r6, r3, #31
 8002200:	d508      	bpl.n	8002214 <_printf_i+0x14c>
 8002202:	6923      	ldr	r3, [r4, #16]
 8002204:	6861      	ldr	r1, [r4, #4]
 8002206:	4299      	cmp	r1, r3
 8002208:	bfde      	ittt	le
 800220a:	2330      	movle	r3, #48	; 0x30
 800220c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002214:	1b52      	subs	r2, r2, r5
 8002216:	6122      	str	r2, [r4, #16]
 8002218:	f8cd a000 	str.w	sl, [sp]
 800221c:	464b      	mov	r3, r9
 800221e:	aa03      	add	r2, sp, #12
 8002220:	4621      	mov	r1, r4
 8002222:	4640      	mov	r0, r8
 8002224:	f7ff fee2 	bl	8001fec <_printf_common>
 8002228:	3001      	adds	r0, #1
 800222a:	d14c      	bne.n	80022c6 <_printf_i+0x1fe>
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	b004      	add	sp, #16
 8002232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002236:	4835      	ldr	r0, [pc, #212]	; (800230c <_printf_i+0x244>)
 8002238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800223c:	6829      	ldr	r1, [r5, #0]
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	f851 6b04 	ldr.w	r6, [r1], #4
 8002244:	6029      	str	r1, [r5, #0]
 8002246:	061d      	lsls	r5, r3, #24
 8002248:	d514      	bpl.n	8002274 <_printf_i+0x1ac>
 800224a:	07df      	lsls	r7, r3, #31
 800224c:	bf44      	itt	mi
 800224e:	f043 0320 	orrmi.w	r3, r3, #32
 8002252:	6023      	strmi	r3, [r4, #0]
 8002254:	b91e      	cbnz	r6, 800225e <_printf_i+0x196>
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	f023 0320 	bic.w	r3, r3, #32
 800225c:	6023      	str	r3, [r4, #0]
 800225e:	2310      	movs	r3, #16
 8002260:	e7b0      	b.n	80021c4 <_printf_i+0xfc>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	f043 0320 	orr.w	r3, r3, #32
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	2378      	movs	r3, #120	; 0x78
 800226c:	4828      	ldr	r0, [pc, #160]	; (8002310 <_printf_i+0x248>)
 800226e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002272:	e7e3      	b.n	800223c <_printf_i+0x174>
 8002274:	0659      	lsls	r1, r3, #25
 8002276:	bf48      	it	mi
 8002278:	b2b6      	uxthmi	r6, r6
 800227a:	e7e6      	b.n	800224a <_printf_i+0x182>
 800227c:	4615      	mov	r5, r2
 800227e:	e7bb      	b.n	80021f8 <_printf_i+0x130>
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	6826      	ldr	r6, [r4, #0]
 8002284:	6961      	ldr	r1, [r4, #20]
 8002286:	1d18      	adds	r0, r3, #4
 8002288:	6028      	str	r0, [r5, #0]
 800228a:	0635      	lsls	r5, r6, #24
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	d501      	bpl.n	8002294 <_printf_i+0x1cc>
 8002290:	6019      	str	r1, [r3, #0]
 8002292:	e002      	b.n	800229a <_printf_i+0x1d2>
 8002294:	0670      	lsls	r0, r6, #25
 8002296:	d5fb      	bpl.n	8002290 <_printf_i+0x1c8>
 8002298:	8019      	strh	r1, [r3, #0]
 800229a:	2300      	movs	r3, #0
 800229c:	6123      	str	r3, [r4, #16]
 800229e:	4615      	mov	r5, r2
 80022a0:	e7ba      	b.n	8002218 <_printf_i+0x150>
 80022a2:	682b      	ldr	r3, [r5, #0]
 80022a4:	1d1a      	adds	r2, r3, #4
 80022a6:	602a      	str	r2, [r5, #0]
 80022a8:	681d      	ldr	r5, [r3, #0]
 80022aa:	6862      	ldr	r2, [r4, #4]
 80022ac:	2100      	movs	r1, #0
 80022ae:	4628      	mov	r0, r5
 80022b0:	f7fd ffa6 	bl	8000200 <memchr>
 80022b4:	b108      	cbz	r0, 80022ba <_printf_i+0x1f2>
 80022b6:	1b40      	subs	r0, r0, r5
 80022b8:	6060      	str	r0, [r4, #4]
 80022ba:	6863      	ldr	r3, [r4, #4]
 80022bc:	6123      	str	r3, [r4, #16]
 80022be:	2300      	movs	r3, #0
 80022c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022c4:	e7a8      	b.n	8002218 <_printf_i+0x150>
 80022c6:	6923      	ldr	r3, [r4, #16]
 80022c8:	462a      	mov	r2, r5
 80022ca:	4649      	mov	r1, r9
 80022cc:	4640      	mov	r0, r8
 80022ce:	47d0      	blx	sl
 80022d0:	3001      	adds	r0, #1
 80022d2:	d0ab      	beq.n	800222c <_printf_i+0x164>
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	079b      	lsls	r3, r3, #30
 80022d8:	d413      	bmi.n	8002302 <_printf_i+0x23a>
 80022da:	68e0      	ldr	r0, [r4, #12]
 80022dc:	9b03      	ldr	r3, [sp, #12]
 80022de:	4298      	cmp	r0, r3
 80022e0:	bfb8      	it	lt
 80022e2:	4618      	movlt	r0, r3
 80022e4:	e7a4      	b.n	8002230 <_printf_i+0x168>
 80022e6:	2301      	movs	r3, #1
 80022e8:	4632      	mov	r2, r6
 80022ea:	4649      	mov	r1, r9
 80022ec:	4640      	mov	r0, r8
 80022ee:	47d0      	blx	sl
 80022f0:	3001      	adds	r0, #1
 80022f2:	d09b      	beq.n	800222c <_printf_i+0x164>
 80022f4:	3501      	adds	r5, #1
 80022f6:	68e3      	ldr	r3, [r4, #12]
 80022f8:	9903      	ldr	r1, [sp, #12]
 80022fa:	1a5b      	subs	r3, r3, r1
 80022fc:	42ab      	cmp	r3, r5
 80022fe:	dcf2      	bgt.n	80022e6 <_printf_i+0x21e>
 8002300:	e7eb      	b.n	80022da <_printf_i+0x212>
 8002302:	2500      	movs	r5, #0
 8002304:	f104 0619 	add.w	r6, r4, #25
 8002308:	e7f5      	b.n	80022f6 <_printf_i+0x22e>
 800230a:	bf00      	nop
 800230c:	080025a9 	.word	0x080025a9
 8002310:	080025ba 	.word	0x080025ba

08002314 <_sbrk_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	4d06      	ldr	r5, [pc, #24]	; (8002330 <_sbrk_r+0x1c>)
 8002318:	2300      	movs	r3, #0
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	f7fe f948 	bl	80005b4 <_sbrk>
 8002324:	1c43      	adds	r3, r0, #1
 8002326:	d102      	bne.n	800232e <_sbrk_r+0x1a>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	b103      	cbz	r3, 800232e <_sbrk_r+0x1a>
 800232c:	6023      	str	r3, [r4, #0]
 800232e:	bd38      	pop	{r3, r4, r5, pc}
 8002330:	200004d8 	.word	0x200004d8

08002334 <__sread>:
 8002334:	b510      	push	{r4, lr}
 8002336:	460c      	mov	r4, r1
 8002338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800233c:	f000 f8a0 	bl	8002480 <_read_r>
 8002340:	2800      	cmp	r0, #0
 8002342:	bfab      	itete	ge
 8002344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002346:	89a3      	ldrhlt	r3, [r4, #12]
 8002348:	181b      	addge	r3, r3, r0
 800234a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800234e:	bfac      	ite	ge
 8002350:	6563      	strge	r3, [r4, #84]	; 0x54
 8002352:	81a3      	strhlt	r3, [r4, #12]
 8002354:	bd10      	pop	{r4, pc}

08002356 <__swrite>:
 8002356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800235a:	461f      	mov	r7, r3
 800235c:	898b      	ldrh	r3, [r1, #12]
 800235e:	05db      	lsls	r3, r3, #23
 8002360:	4605      	mov	r5, r0
 8002362:	460c      	mov	r4, r1
 8002364:	4616      	mov	r6, r2
 8002366:	d505      	bpl.n	8002374 <__swrite+0x1e>
 8002368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800236c:	2302      	movs	r3, #2
 800236e:	2200      	movs	r2, #0
 8002370:	f000 f868 	bl	8002444 <_lseek_r>
 8002374:	89a3      	ldrh	r3, [r4, #12]
 8002376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800237a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800237e:	81a3      	strh	r3, [r4, #12]
 8002380:	4632      	mov	r2, r6
 8002382:	463b      	mov	r3, r7
 8002384:	4628      	mov	r0, r5
 8002386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800238a:	f000 b817 	b.w	80023bc <_write_r>

0800238e <__sseek>:
 800238e:	b510      	push	{r4, lr}
 8002390:	460c      	mov	r4, r1
 8002392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002396:	f000 f855 	bl	8002444 <_lseek_r>
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	89a3      	ldrh	r3, [r4, #12]
 800239e:	bf15      	itete	ne
 80023a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80023a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023aa:	81a3      	strheq	r3, [r4, #12]
 80023ac:	bf18      	it	ne
 80023ae:	81a3      	strhne	r3, [r4, #12]
 80023b0:	bd10      	pop	{r4, pc}

080023b2 <__sclose>:
 80023b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023b6:	f000 b813 	b.w	80023e0 <_close_r>
	...

080023bc <_write_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4d07      	ldr	r5, [pc, #28]	; (80023dc <_write_r+0x20>)
 80023c0:	4604      	mov	r4, r0
 80023c2:	4608      	mov	r0, r1
 80023c4:	4611      	mov	r1, r2
 80023c6:	2200      	movs	r2, #0
 80023c8:	602a      	str	r2, [r5, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f7fe f8a5 	bl	800051a <_write>
 80023d0:	1c43      	adds	r3, r0, #1
 80023d2:	d102      	bne.n	80023da <_write_r+0x1e>
 80023d4:	682b      	ldr	r3, [r5, #0]
 80023d6:	b103      	cbz	r3, 80023da <_write_r+0x1e>
 80023d8:	6023      	str	r3, [r4, #0]
 80023da:	bd38      	pop	{r3, r4, r5, pc}
 80023dc:	200004d8 	.word	0x200004d8

080023e0 <_close_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4d06      	ldr	r5, [pc, #24]	; (80023fc <_close_r+0x1c>)
 80023e4:	2300      	movs	r3, #0
 80023e6:	4604      	mov	r4, r0
 80023e8:	4608      	mov	r0, r1
 80023ea:	602b      	str	r3, [r5, #0]
 80023ec:	f7fe f8b1 	bl	8000552 <_close>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_close_r+0x1a>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_close_r+0x1a>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	200004d8 	.word	0x200004d8

08002400 <_fstat_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4d07      	ldr	r5, [pc, #28]	; (8002420 <_fstat_r+0x20>)
 8002404:	2300      	movs	r3, #0
 8002406:	4604      	mov	r4, r0
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	602b      	str	r3, [r5, #0]
 800240e:	f7fe f8ab 	bl	8000568 <_fstat>
 8002412:	1c43      	adds	r3, r0, #1
 8002414:	d102      	bne.n	800241c <_fstat_r+0x1c>
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	b103      	cbz	r3, 800241c <_fstat_r+0x1c>
 800241a:	6023      	str	r3, [r4, #0]
 800241c:	bd38      	pop	{r3, r4, r5, pc}
 800241e:	bf00      	nop
 8002420:	200004d8 	.word	0x200004d8

08002424 <_isatty_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4d06      	ldr	r5, [pc, #24]	; (8002440 <_isatty_r+0x1c>)
 8002428:	2300      	movs	r3, #0
 800242a:	4604      	mov	r4, r0
 800242c:	4608      	mov	r0, r1
 800242e:	602b      	str	r3, [r5, #0]
 8002430:	f7fe f8a9 	bl	8000586 <_isatty>
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	d102      	bne.n	800243e <_isatty_r+0x1a>
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	b103      	cbz	r3, 800243e <_isatty_r+0x1a>
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	bd38      	pop	{r3, r4, r5, pc}
 8002440:	200004d8 	.word	0x200004d8

08002444 <_lseek_r>:
 8002444:	b538      	push	{r3, r4, r5, lr}
 8002446:	4d07      	ldr	r5, [pc, #28]	; (8002464 <_lseek_r+0x20>)
 8002448:	4604      	mov	r4, r0
 800244a:	4608      	mov	r0, r1
 800244c:	4611      	mov	r1, r2
 800244e:	2200      	movs	r2, #0
 8002450:	602a      	str	r2, [r5, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	f7fe f8a1 	bl	800059a <_lseek>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	d102      	bne.n	8002462 <_lseek_r+0x1e>
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	b103      	cbz	r3, 8002462 <_lseek_r+0x1e>
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	200004d8 	.word	0x200004d8

08002468 <__malloc_lock>:
 8002468:	4801      	ldr	r0, [pc, #4]	; (8002470 <__malloc_lock+0x8>)
 800246a:	f7ff bb21 	b.w	8001ab0 <__retarget_lock_acquire_recursive>
 800246e:	bf00      	nop
 8002470:	200004cc 	.word	0x200004cc

08002474 <__malloc_unlock>:
 8002474:	4801      	ldr	r0, [pc, #4]	; (800247c <__malloc_unlock+0x8>)
 8002476:	f7ff bb1c 	b.w	8001ab2 <__retarget_lock_release_recursive>
 800247a:	bf00      	nop
 800247c:	200004cc 	.word	0x200004cc

08002480 <_read_r>:
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	4d07      	ldr	r5, [pc, #28]	; (80024a0 <_read_r+0x20>)
 8002484:	4604      	mov	r4, r0
 8002486:	4608      	mov	r0, r1
 8002488:	4611      	mov	r1, r2
 800248a:	2200      	movs	r2, #0
 800248c:	602a      	str	r2, [r5, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	f7fe f826 	bl	80004e0 <_read>
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	d102      	bne.n	800249e <_read_r+0x1e>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	b103      	cbz	r3, 800249e <_read_r+0x1e>
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	200004d8 	.word	0x200004d8

080024a4 <_init>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	bf00      	nop
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr

080024b0 <_fini>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	bf00      	nop
 80024b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b6:	bc08      	pop	{r3}
 80024b8:	469e      	mov	lr, r3
 80024ba:	4770      	bx	lr
